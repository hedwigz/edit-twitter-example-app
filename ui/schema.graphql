"""
ChangesWhereInput is used for filtering Changes objects.
Input was generated by ent.
"""
input ChangesWhereInput {
  not: ChangesWhereInput
  and: [ChangesWhereInput!]
  or: [ChangesWhereInput!]
  """column field predicates"""
  column: String
  columnNEQ: String
  columnIn: [String!]
  columnNotIn: [String!]
  columnGT: String
  columnGTE: String
  columnLT: String
  columnLTE: String
  columnContains: String
  columnHasPrefix: String
  columnHasSuffix: String
  columnEqualFold: String
  columnContainsFold: String
  """value field predicates"""
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """previous field predicates"""
  previous: String
  previousNEQ: String
  previousIn: [String!]
  previousNotIn: [String!]
  previousGT: String
  previousGTE: String
  previousLT: String
  previousLTE: String
  previousContains: String
  previousHasPrefix: String
  previousHasSuffix: String
  previousIsNil: Boolean
  previousNotNil: Boolean
  previousEqualFold: String
  previousContainsFold: String
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """operation edge predicates"""
  hasOperation: Boolean
  hasOperationWith: [HistoryWhereInput!]
}

"""
HistoryWhereInput is used for filtering History objects.
Input was generated by ent.
"""
input HistoryWhereInput {
  not: HistoryWhereInput
  and: [HistoryWhereInput!]
  or: [HistoryWhereInput!]
  """entity_name field predicates"""
  entityName: String
  entityNameNEQ: String
  entityNameIn: [String!]
  entityNameNotIn: [String!]
  entityNameGT: String
  entityNameGTE: String
  entityNameLT: String
  entityNameLTE: String
  entityNameContains: String
  entityNameHasPrefix: String
  entityNameHasSuffix: String
  entityNameEqualFold: String
  entityNameContainsFold: String
  """record_id field predicates"""
  recordID: Int
  recordIDNEQ: Int
  recordIDIn: [Int!]
  recordIDNotIn: [Int!]
  recordIDGT: Int
  recordIDGTE: Int
  recordIDLT: Int
  recordIDLTE: Int
  """timestamp field predicates"""
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
  """action field predicates"""
  action: Action
  actionNEQ: Action
  actionIn: [Action!]
  actionNotIn: [Action!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """changes edge predicates"""
  hasChanges: Boolean
  hasChangesWith: [ChangesWhereInput!]
}

"""
TweetWhereInput is used for filtering Tweet objects.
Input was generated by ent.
"""
input TweetWhereInput {
  not: TweetWhereInput
  and: [TweetWhereInput!]
  or: [TweetWhereInput!]
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """created field predicates"""
  created: Time
  createdNEQ: Time
  createdIn: [Time!]
  createdNotIn: [Time!]
  createdGT: Time
  createdGTE: Time
  createdLT: Time
  createdLTE: Time
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [UserWhereInput!]
  """likes edge predicates"""
  hasLikes: Boolean
  hasLikesWith: [UserWhereInput!]
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """role field predicates"""
  role: Int
  roleNEQ: Int
  roleIn: [Int!]
  roleNotIn: [Int!]
  roleGT: Int
  roleGTE: Int
  roleLT: Int
  roleLTE: Int
  """created field predicates"""
  created: Time
  createdNEQ: Time
  createdIn: [Time!]
  createdNotIn: [Time!]
  createdGT: Time
  createdGTE: Time
  createdLT: Time
  createdLTE: Time
  """age field predicates"""
  age: Int
  ageNEQ: Int
  ageIn: [Int!]
  ageNotIn: [Int!]
  ageGT: Int
  ageGTE: Int
  ageLT: Int
  ageLTE: Int
  ageIsNil: Boolean
  ageNotNil: Boolean
  """image_url field predicates"""
  imageURL: String
  imageURLNEQ: String
  imageURLIn: [String!]
  imageURLNotIn: [String!]
  imageURLGT: String
  imageURLGTE: String
  imageURLLT: String
  imageURLLTE: String
  imageURLContains: String
  imageURLHasPrefix: String
  imageURLHasSuffix: String
  imageURLEqualFold: String
  imageURLContainsFold: String
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """tweets edge predicates"""
  hasTweets: Boolean
  hasTweetsWith: [TweetWhereInput!]
  """followers edge predicates"""
  hasFollowers: Boolean
  hasFollowersWith: [UserWhereInput!]
  """following edge predicates"""
  hasFollowing: Boolean
  hasFollowingWith: [UserWhereInput!]
  """liked edge predicates"""
  hasLiked: Boolean
  hasLikedWith: [TweetWhereInput!]
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

type TweetConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TweetEdge]
}

type TweetEdge {
  node: Tweet
  cursor: Cursor!
}

enum TweetOrderField {
  CREATED_AT
}

enum OrderDirection {
  ASC
  DESC
}

input TweetOrder {
  direction: OrderDirection!
  field: TweetOrderField
}

scalar Time

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  name: String!
  image_url: String
  email: String!
  created: Time!
  age: Int!
  Followers: [User]
  Following: [User]
}

type Tweet implements Node {
  id: ID!
  created: Time!
  content: String!
  author: User!
  history: [TweetEdit!]
  likesCount: Int!
  userLiked(id: ID!): Boolean!
  likedUsers(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TweetOrder): UserConnection
}

input TweetInput {
  content: String!
}

input TweetUpdateInput {
  content: String
}

type Mutation {
  createTweet(tweet: TweetInput!): Tweet!
  likeTweet(id: ID!): Tweet!
  updateTweet(id: ID!, tweet: TweetUpdateInput!): Tweet!
}

type TweetEdit {
  id: ID!
  editedAt: Time!
  editor: User!
  diff: String!
}

type Query {
  tweets: [Tweet!]
  tweet(id: ID!): Tweet
  me: User!
  node(id: ID!): Node!
  nodes(ids: [ID!]!): [Node]!
  tweetsX(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TweetOrder): TweetConnection
  tweetEditHistory(id: ID!): [TweetEdit!]
}

schema {
  query: Query
  mutation: Mutation
}
