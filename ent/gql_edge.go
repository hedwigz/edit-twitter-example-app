// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (c *Changes) Operation(ctx context.Context) (*History, error) {
	result, err := c.Edges.OperationOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOperation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (h *History) Changes(ctx context.Context) ([]*Changes, error) {
	result, err := h.Edges.ChangesOrErr()
	if IsNotLoaded(err) {
		result, err = h.QueryChanges().All(ctx)
	}
	return result, err
}

func (t *Tweet) Author(ctx context.Context) (*User, error) {
	result, err := t.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAuthor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tweet) Likes(ctx context.Context) ([]*User, error) {
	result, err := t.Edges.LikesOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryLikes().All(ctx)
	}
	return result, err
}

func (u *User) Tweets(ctx context.Context) ([]*Tweet, error) {
	result, err := u.Edges.TweetsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTweets().All(ctx)
	}
	return result, err
}

func (u *User) Followers(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.FollowersOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollowers().All(ctx)
	}
	return result, err
}

func (u *User) Following(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.FollowingOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollowing().All(ctx)
	}
	return result, err
}

func (u *User) Liked(ctx context.Context) ([]*Tweet, error) {
	result, err := u.Edges.LikedOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLiked().All(ctx)
	}
	return result, err
}
