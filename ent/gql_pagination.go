// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/ariga/edit-twitter-example-app/ent/changes"
	"github.com/ariga/edit-twitter-example-app/ent/history"
	"github.com/ariga/edit-twitter-example-app/ent/tweet"
	"github.com/ariga/edit-twitter-example-app/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// ChangesEdge is the edge representation of Changes.
type ChangesEdge struct {
	Node   *Changes `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ChangesConnection is the connection containing edges to Changes.
type ChangesConnection struct {
	Edges      []*ChangesEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// ChangesPaginateOption enables pagination customization.
type ChangesPaginateOption func(*changesPager) error

// WithChangesOrder configures pagination ordering.
func WithChangesOrder(order *ChangesOrder) ChangesPaginateOption {
	if order == nil {
		order = DefaultChangesOrder
	}
	o := *order
	return func(pager *changesPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultChangesOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithChangesFilter configures pagination filter.
func WithChangesFilter(filter func(*ChangesQuery) (*ChangesQuery, error)) ChangesPaginateOption {
	return func(pager *changesPager) error {
		if filter == nil {
			return errors.New("ChangesQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type changesPager struct {
	order  *ChangesOrder
	filter func(*ChangesQuery) (*ChangesQuery, error)
}

func newChangesPager(opts []ChangesPaginateOption) (*changesPager, error) {
	pager := &changesPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultChangesOrder
	}
	return pager, nil
}

func (p *changesPager) applyFilter(query *ChangesQuery) (*ChangesQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *changesPager) toCursor(c *Changes) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *changesPager) applyCursors(query *ChangesQuery, after, before *Cursor) *ChangesQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultChangesOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *changesPager) applyOrder(query *ChangesQuery, reverse bool) *ChangesQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultChangesOrder.Field {
		query = query.Order(direction.orderFunc(DefaultChangesOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Changes.
func (c *ChangesQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ChangesPaginateOption,
) (*ChangesConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newChangesPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}

	conn := &ChangesConnection{Edges: []*ChangesEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := c.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		c = c.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Changes
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Changes {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Changes {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ChangesEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ChangesEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ChangesOrderField defines the ordering field of Changes.
type ChangesOrderField struct {
	field    string
	toCursor func(*Changes) Cursor
}

// ChangesOrder defines the ordering of Changes.
type ChangesOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ChangesOrderField `json:"field"`
}

// DefaultChangesOrder is the default ordering of Changes.
var DefaultChangesOrder = &ChangesOrder{
	Direction: OrderDirectionAsc,
	Field: &ChangesOrderField{
		field: changes.FieldID,
		toCursor: func(c *Changes) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Changes into ChangesEdge.
func (c *Changes) ToEdge(order *ChangesOrder) *ChangesEdge {
	if order == nil {
		order = DefaultChangesOrder
	}
	return &ChangesEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// HistoryEdge is the edge representation of History.
type HistoryEdge struct {
	Node   *History `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// HistoryConnection is the connection containing edges to History.
type HistoryConnection struct {
	Edges      []*HistoryEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// HistoryPaginateOption enables pagination customization.
type HistoryPaginateOption func(*historyPager) error

// WithHistoryOrder configures pagination ordering.
func WithHistoryOrder(order *HistoryOrder) HistoryPaginateOption {
	if order == nil {
		order = DefaultHistoryOrder
	}
	o := *order
	return func(pager *historyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHistoryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHistoryFilter configures pagination filter.
func WithHistoryFilter(filter func(*HistoryQuery) (*HistoryQuery, error)) HistoryPaginateOption {
	return func(pager *historyPager) error {
		if filter == nil {
			return errors.New("HistoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type historyPager struct {
	order  *HistoryOrder
	filter func(*HistoryQuery) (*HistoryQuery, error)
}

func newHistoryPager(opts []HistoryPaginateOption) (*historyPager, error) {
	pager := &historyPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHistoryOrder
	}
	return pager, nil
}

func (p *historyPager) applyFilter(query *HistoryQuery) (*HistoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *historyPager) toCursor(h *History) Cursor {
	return p.order.Field.toCursor(h)
}

func (p *historyPager) applyCursors(query *HistoryQuery, after, before *Cursor) *HistoryQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultHistoryOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *historyPager) applyOrder(query *HistoryQuery, reverse bool) *HistoryQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultHistoryOrder.Field {
		query = query.Order(direction.orderFunc(DefaultHistoryOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to History.
func (h *HistoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HistoryPaginateOption,
) (*HistoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHistoryPager(opts)
	if err != nil {
		return nil, err
	}

	if h, err = pager.applyFilter(h); err != nil {
		return nil, err
	}

	conn := &HistoryConnection{Edges: []*HistoryEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := h.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := h.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	h = pager.applyCursors(h, after, before)
	h = pager.applyOrder(h, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		h = h.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		h = h.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := h.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *History
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *History {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *History {
			return nodes[i]
		}
	}

	conn.Edges = make([]*HistoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &HistoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// HistoryOrderField defines the ordering field of History.
type HistoryOrderField struct {
	field    string
	toCursor func(*History) Cursor
}

// HistoryOrder defines the ordering of History.
type HistoryOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *HistoryOrderField `json:"field"`
}

// DefaultHistoryOrder is the default ordering of History.
var DefaultHistoryOrder = &HistoryOrder{
	Direction: OrderDirectionAsc,
	Field: &HistoryOrderField{
		field: history.FieldID,
		toCursor: func(h *History) Cursor {
			return Cursor{ID: h.ID}
		},
	},
}

// ToEdge converts History into HistoryEdge.
func (h *History) ToEdge(order *HistoryOrder) *HistoryEdge {
	if order == nil {
		order = DefaultHistoryOrder
	}
	return &HistoryEdge{
		Node:   h,
		Cursor: order.Field.toCursor(h),
	}
}

// TweetEdge is the edge representation of Tweet.
type TweetEdge struct {
	Node   *Tweet `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TweetConnection is the connection containing edges to Tweet.
type TweetConnection struct {
	Edges      []*TweetEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// TweetPaginateOption enables pagination customization.
type TweetPaginateOption func(*tweetPager) error

// WithTweetOrder configures pagination ordering.
func WithTweetOrder(order *TweetOrder) TweetPaginateOption {
	if order == nil {
		order = DefaultTweetOrder
	}
	o := *order
	return func(pager *tweetPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTweetOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTweetFilter configures pagination filter.
func WithTweetFilter(filter func(*TweetQuery) (*TweetQuery, error)) TweetPaginateOption {
	return func(pager *tweetPager) error {
		if filter == nil {
			return errors.New("TweetQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tweetPager struct {
	order  *TweetOrder
	filter func(*TweetQuery) (*TweetQuery, error)
}

func newTweetPager(opts []TweetPaginateOption) (*tweetPager, error) {
	pager := &tweetPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTweetOrder
	}
	return pager, nil
}

func (p *tweetPager) applyFilter(query *TweetQuery) (*TweetQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tweetPager) toCursor(t *Tweet) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tweetPager) applyCursors(query *TweetQuery, after, before *Cursor) *TweetQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTweetOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tweetPager) applyOrder(query *TweetQuery, reverse bool) *TweetQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTweetOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTweetOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Tweet.
func (t *TweetQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TweetPaginateOption,
) (*TweetConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTweetPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TweetConnection{Edges: []*TweetEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Tweet
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tweet {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tweet {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TweetEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TweetEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// TweetOrderFieldCreated orders Tweet by created.
	TweetOrderFieldCreated = &TweetOrderField{
		field: tweet.FieldCreated,
		toCursor: func(t *Tweet) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Created,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TweetOrderField) String() string {
	var str string
	switch f.field {
	case tweet.FieldCreated:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TweetOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TweetOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TweetOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TweetOrderFieldCreated
	default:
		return fmt.Errorf("%s is not a valid TweetOrderField", str)
	}
	return nil
}

// TweetOrderField defines the ordering field of Tweet.
type TweetOrderField struct {
	field    string
	toCursor func(*Tweet) Cursor
}

// TweetOrder defines the ordering of Tweet.
type TweetOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *TweetOrderField `json:"field"`
}

// DefaultTweetOrder is the default ordering of Tweet.
var DefaultTweetOrder = &TweetOrder{
	Direction: OrderDirectionAsc,
	Field: &TweetOrderField{
		field: tweet.FieldID,
		toCursor: func(t *Tweet) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tweet into TweetEdge.
func (t *Tweet) ToEdge(order *TweetOrder) *TweetEdge {
	if order == nil {
		order = DefaultTweetOrder
	}
	return &TweetEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
