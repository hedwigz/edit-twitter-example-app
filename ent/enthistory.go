// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/ariga/edit-twitter-example-app/ent/history"
	"github.com/ariga/edit-twitter-example-app/ent/tweet"
)

// Enrich allow modifying how an History node is created
type Enrich func(context.Context, *HistoryCreate) *HistoryCreate

type historyMutator struct {
	mutationEnrich Enrich
}

func NewHistoryMutator(mutationEnrich Enrich) historyMutator {
	return historyMutator{mutationEnrich}
}

// QueryHistory queries the history of Tweet.
func (c *TweetClient) QueryHistory(t *Tweet) *HistoryQuery {
	query := &HistoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tweet.Table, tweet.FieldID, id),
			sqlgraph.To(history.Table, history.FieldRecordID),
			sqlgraph.Edge(sqlgraph.O2M, false, history.Table, history.FieldRecordID),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

func (hm historyMutator) TweetHistoryMutateHook(next ent.Mutator) ent.Mutator {
	return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
		if !m.Op().Is(ent.OpCreate | ent.OpUpdateOne) {
			return next.Mutate(ctx, m)
		}
		tm := m.(*TweetMutation)
		prevs := make(map[string]string)
		if prev, err := tm.OldContent(ctx); err == nil {
			pv := prev
			prevs["content"] = pv
		}
		tx, err := tm.Tx()
		if err != nil {
			return nil, err
		}
		v, err := next.Mutate(ctx, m)
		if err != nil {
			return v, err
		}
		t := v.(*Tweet)
		var bulk []*ChangesCreate
		if c, ok := tm.Content(); ok {
			fv := c
			change := tx.Changes.Create().
				SetColumn("content").
				SetValue(fv)
			if prev, ok := prevs["content"]; ok {
				change.SetPrevious(prev)
			}
			bulk = append(bulk, change)
		}
		if len(bulk) == 0 {
			return v, nil
		}
		changes, err := tx.Changes.CreateBulk(bulk...).Save(ctx)
		if err != nil {
			return nil, err
		}

		action := history.ActionCreate
		if m.Op().Is(ent.OpUpdate | ent.OpUpdateOne) {
			action = history.ActionUpdate
		}

		hc := tx.History.Create().
			AddChanges(changes...).
			SetRecordID(t.ID).
			SetTimestamp(time.Now()).
			SetEntityName("Tweet").
			SetAction(action)

		if hm.mutationEnrich != nil {
			hc = hm.mutationEnrich(ctx, hc)
		}

		return v, hc.Exec(ctx)
	})
}

// HookHistory Hooks the ent.Client with all of history mutators.
func HookHistory(client *Client, enrich Enrich) {
	hm := NewHistoryMutator(enrich)
	client.Tweet.Use(hm.TweetHistoryMutateHook)
}
