// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/ariga/edit-twitter-example-app/ent/changes"
	"github.com/ariga/edit-twitter-example-app/ent/history"
	"github.com/ariga/edit-twitter-example-app/ent/predicate"
	"github.com/ariga/edit-twitter-example-app/ent/tweet"
	"github.com/ariga/edit-twitter-example-app/ent/user"
)

// ChangesWhereInput represents a where input for filtering Changes queries.
type ChangesWhereInput struct {
	Not *ChangesWhereInput   `json:"not,omitempty"`
	Or  []*ChangesWhereInput `json:"or,omitempty"`
	And []*ChangesWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "column" field predicates.
	Column             *string  `json:"column,omitempty"`
	ColumnNEQ          *string  `json:"columnNEQ,omitempty"`
	ColumnIn           []string `json:"columnIn,omitempty"`
	ColumnNotIn        []string `json:"columnNotIn,omitempty"`
	ColumnGT           *string  `json:"columnGT,omitempty"`
	ColumnGTE          *string  `json:"columnGTE,omitempty"`
	ColumnLT           *string  `json:"columnLT,omitempty"`
	ColumnLTE          *string  `json:"columnLTE,omitempty"`
	ColumnContains     *string  `json:"columnContains,omitempty"`
	ColumnHasPrefix    *string  `json:"columnHasPrefix,omitempty"`
	ColumnHasSuffix    *string  `json:"columnHasSuffix,omitempty"`
	ColumnEqualFold    *string  `json:"columnEqualFold,omitempty"`
	ColumnContainsFold *string  `json:"columnContainsFold,omitempty"`

	// "value" field predicates.
	Value             *string  `json:"value,omitempty"`
	ValueNEQ          *string  `json:"valueNEQ,omitempty"`
	ValueIn           []string `json:"valueIn,omitempty"`
	ValueNotIn        []string `json:"valueNotIn,omitempty"`
	ValueGT           *string  `json:"valueGT,omitempty"`
	ValueGTE          *string  `json:"valueGTE,omitempty"`
	ValueLT           *string  `json:"valueLT,omitempty"`
	ValueLTE          *string  `json:"valueLTE,omitempty"`
	ValueContains     *string  `json:"valueContains,omitempty"`
	ValueHasPrefix    *string  `json:"valueHasPrefix,omitempty"`
	ValueHasSuffix    *string  `json:"valueHasSuffix,omitempty"`
	ValueEqualFold    *string  `json:"valueEqualFold,omitempty"`
	ValueContainsFold *string  `json:"valueContainsFold,omitempty"`

	// "previous" field predicates.
	Previous             *string  `json:"previous,omitempty"`
	PreviousNEQ          *string  `json:"previousNEQ,omitempty"`
	PreviousIn           []string `json:"previousIn,omitempty"`
	PreviousNotIn        []string `json:"previousNotIn,omitempty"`
	PreviousGT           *string  `json:"previousGT,omitempty"`
	PreviousGTE          *string  `json:"previousGTE,omitempty"`
	PreviousLT           *string  `json:"previousLT,omitempty"`
	PreviousLTE          *string  `json:"previousLTE,omitempty"`
	PreviousContains     *string  `json:"previousContains,omitempty"`
	PreviousHasPrefix    *string  `json:"previousHasPrefix,omitempty"`
	PreviousHasSuffix    *string  `json:"previousHasSuffix,omitempty"`
	PreviousIsNil        bool     `json:"previousIsNil,omitempty"`
	PreviousNotNil       bool     `json:"previousNotNil,omitempty"`
	PreviousEqualFold    *string  `json:"previousEqualFold,omitempty"`
	PreviousContainsFold *string  `json:"previousContainsFold,omitempty"`

	// "operation" edge predicates.
	HasOperation     *bool                `json:"hasOperation,omitempty"`
	HasOperationWith []*HistoryWhereInput `json:"hasOperationWith,omitempty"`
}

// Filter applies the ChangesWhereInput filter on the ChangesQuery builder.
func (i *ChangesWhereInput) Filter(q *ChangesQuery) (*ChangesQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering changesslice.
// An error is returned if the input is empty or invalid.
func (i *ChangesWhereInput) P() (predicate.Changes, error) {
	var predicates []predicate.Changes
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, changes.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Changes, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, changes.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Changes, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, changes.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, changes.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, changes.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, changes.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, changes.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, changes.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, changes.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, changes.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, changes.IDLTE(*i.IDLTE))
	}
	if i.Column != nil {
		predicates = append(predicates, changes.ColumnEQ(*i.Column))
	}
	if i.ColumnNEQ != nil {
		predicates = append(predicates, changes.ColumnNEQ(*i.ColumnNEQ))
	}
	if len(i.ColumnIn) > 0 {
		predicates = append(predicates, changes.ColumnIn(i.ColumnIn...))
	}
	if len(i.ColumnNotIn) > 0 {
		predicates = append(predicates, changes.ColumnNotIn(i.ColumnNotIn...))
	}
	if i.ColumnGT != nil {
		predicates = append(predicates, changes.ColumnGT(*i.ColumnGT))
	}
	if i.ColumnGTE != nil {
		predicates = append(predicates, changes.ColumnGTE(*i.ColumnGTE))
	}
	if i.ColumnLT != nil {
		predicates = append(predicates, changes.ColumnLT(*i.ColumnLT))
	}
	if i.ColumnLTE != nil {
		predicates = append(predicates, changes.ColumnLTE(*i.ColumnLTE))
	}
	if i.ColumnContains != nil {
		predicates = append(predicates, changes.ColumnContains(*i.ColumnContains))
	}
	if i.ColumnHasPrefix != nil {
		predicates = append(predicates, changes.ColumnHasPrefix(*i.ColumnHasPrefix))
	}
	if i.ColumnHasSuffix != nil {
		predicates = append(predicates, changes.ColumnHasSuffix(*i.ColumnHasSuffix))
	}
	if i.ColumnEqualFold != nil {
		predicates = append(predicates, changes.ColumnEqualFold(*i.ColumnEqualFold))
	}
	if i.ColumnContainsFold != nil {
		predicates = append(predicates, changes.ColumnContainsFold(*i.ColumnContainsFold))
	}
	if i.Value != nil {
		predicates = append(predicates, changes.ValueEQ(*i.Value))
	}
	if i.ValueNEQ != nil {
		predicates = append(predicates, changes.ValueNEQ(*i.ValueNEQ))
	}
	if len(i.ValueIn) > 0 {
		predicates = append(predicates, changes.ValueIn(i.ValueIn...))
	}
	if len(i.ValueNotIn) > 0 {
		predicates = append(predicates, changes.ValueNotIn(i.ValueNotIn...))
	}
	if i.ValueGT != nil {
		predicates = append(predicates, changes.ValueGT(*i.ValueGT))
	}
	if i.ValueGTE != nil {
		predicates = append(predicates, changes.ValueGTE(*i.ValueGTE))
	}
	if i.ValueLT != nil {
		predicates = append(predicates, changes.ValueLT(*i.ValueLT))
	}
	if i.ValueLTE != nil {
		predicates = append(predicates, changes.ValueLTE(*i.ValueLTE))
	}
	if i.ValueContains != nil {
		predicates = append(predicates, changes.ValueContains(*i.ValueContains))
	}
	if i.ValueHasPrefix != nil {
		predicates = append(predicates, changes.ValueHasPrefix(*i.ValueHasPrefix))
	}
	if i.ValueHasSuffix != nil {
		predicates = append(predicates, changes.ValueHasSuffix(*i.ValueHasSuffix))
	}
	if i.ValueEqualFold != nil {
		predicates = append(predicates, changes.ValueEqualFold(*i.ValueEqualFold))
	}
	if i.ValueContainsFold != nil {
		predicates = append(predicates, changes.ValueContainsFold(*i.ValueContainsFold))
	}
	if i.Previous != nil {
		predicates = append(predicates, changes.PreviousEQ(*i.Previous))
	}
	if i.PreviousNEQ != nil {
		predicates = append(predicates, changes.PreviousNEQ(*i.PreviousNEQ))
	}
	if len(i.PreviousIn) > 0 {
		predicates = append(predicates, changes.PreviousIn(i.PreviousIn...))
	}
	if len(i.PreviousNotIn) > 0 {
		predicates = append(predicates, changes.PreviousNotIn(i.PreviousNotIn...))
	}
	if i.PreviousGT != nil {
		predicates = append(predicates, changes.PreviousGT(*i.PreviousGT))
	}
	if i.PreviousGTE != nil {
		predicates = append(predicates, changes.PreviousGTE(*i.PreviousGTE))
	}
	if i.PreviousLT != nil {
		predicates = append(predicates, changes.PreviousLT(*i.PreviousLT))
	}
	if i.PreviousLTE != nil {
		predicates = append(predicates, changes.PreviousLTE(*i.PreviousLTE))
	}
	if i.PreviousContains != nil {
		predicates = append(predicates, changes.PreviousContains(*i.PreviousContains))
	}
	if i.PreviousHasPrefix != nil {
		predicates = append(predicates, changes.PreviousHasPrefix(*i.PreviousHasPrefix))
	}
	if i.PreviousHasSuffix != nil {
		predicates = append(predicates, changes.PreviousHasSuffix(*i.PreviousHasSuffix))
	}
	if i.PreviousIsNil {
		predicates = append(predicates, changes.PreviousIsNil())
	}
	if i.PreviousNotNil {
		predicates = append(predicates, changes.PreviousNotNil())
	}
	if i.PreviousEqualFold != nil {
		predicates = append(predicates, changes.PreviousEqualFold(*i.PreviousEqualFold))
	}
	if i.PreviousContainsFold != nil {
		predicates = append(predicates, changes.PreviousContainsFold(*i.PreviousContainsFold))
	}

	if i.HasOperation != nil {
		p := changes.HasOperation()
		if !*i.HasOperation {
			p = changes.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOperationWith) > 0 {
		with := make([]predicate.History, 0, len(i.HasOperationWith))
		for _, w := range i.HasOperationWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, changes.HasOperationWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/ariga/edit-twitter-example-app/ent: empty predicate ChangesWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return changes.And(predicates...), nil
	}
}

// HistoryWhereInput represents a where input for filtering History queries.
type HistoryWhereInput struct {
	Not *HistoryWhereInput   `json:"not,omitempty"`
	Or  []*HistoryWhereInput `json:"or,omitempty"`
	And []*HistoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "entity_name" field predicates.
	EntityName             *string  `json:"entityName,omitempty"`
	EntityNameNEQ          *string  `json:"entityNameNEQ,omitempty"`
	EntityNameIn           []string `json:"entityNameIn,omitempty"`
	EntityNameNotIn        []string `json:"entityNameNotIn,omitempty"`
	EntityNameGT           *string  `json:"entityNameGT,omitempty"`
	EntityNameGTE          *string  `json:"entityNameGTE,omitempty"`
	EntityNameLT           *string  `json:"entityNameLT,omitempty"`
	EntityNameLTE          *string  `json:"entityNameLTE,omitempty"`
	EntityNameContains     *string  `json:"entityNameContains,omitempty"`
	EntityNameHasPrefix    *string  `json:"entityNameHasPrefix,omitempty"`
	EntityNameHasSuffix    *string  `json:"entityNameHasSuffix,omitempty"`
	EntityNameEqualFold    *string  `json:"entityNameEqualFold,omitempty"`
	EntityNameContainsFold *string  `json:"entityNameContainsFold,omitempty"`

	// "record_id" field predicates.
	RecordID      *int  `json:"recordID,omitempty"`
	RecordIDNEQ   *int  `json:"recordIDNEQ,omitempty"`
	RecordIDIn    []int `json:"recordIDIn,omitempty"`
	RecordIDNotIn []int `json:"recordIDNotIn,omitempty"`
	RecordIDGT    *int  `json:"recordIDGT,omitempty"`
	RecordIDGTE   *int  `json:"recordIDGTE,omitempty"`
	RecordIDLT    *int  `json:"recordIDLT,omitempty"`
	RecordIDLTE   *int  `json:"recordIDLTE,omitempty"`

	// "timestamp" field predicates.
	Timestamp      *time.Time  `json:"timestamp,omitempty"`
	TimestampNEQ   *time.Time  `json:"timestampNEQ,omitempty"`
	TimestampIn    []time.Time `json:"timestampIn,omitempty"`
	TimestampNotIn []time.Time `json:"timestampNotIn,omitempty"`
	TimestampGT    *time.Time  `json:"timestampGT,omitempty"`
	TimestampGTE   *time.Time  `json:"timestampGTE,omitempty"`
	TimestampLT    *time.Time  `json:"timestampLT,omitempty"`
	TimestampLTE   *time.Time  `json:"timestampLTE,omitempty"`

	// "action" field predicates.
	Action      *history.Action  `json:"action,omitempty"`
	ActionNEQ   *history.Action  `json:"actionNEQ,omitempty"`
	ActionIn    []history.Action `json:"actionIn,omitempty"`
	ActionNotIn []history.Action `json:"actionNotIn,omitempty"`

	// "changes" edge predicates.
	HasChanges     *bool                `json:"hasChanges,omitempty"`
	HasChangesWith []*ChangesWhereInput `json:"hasChangesWith,omitempty"`
}

// Filter applies the HistoryWhereInput filter on the HistoryQuery builder.
func (i *HistoryWhereInput) Filter(q *HistoryQuery) (*HistoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering histories.
// An error is returned if the input is empty or invalid.
func (i *HistoryWhereInput) P() (predicate.History, error) {
	var predicates []predicate.History
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, history.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.History, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, history.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.History, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, history.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, history.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, history.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, history.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, history.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, history.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, history.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, history.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, history.IDLTE(*i.IDLTE))
	}
	if i.EntityName != nil {
		predicates = append(predicates, history.EntityNameEQ(*i.EntityName))
	}
	if i.EntityNameNEQ != nil {
		predicates = append(predicates, history.EntityNameNEQ(*i.EntityNameNEQ))
	}
	if len(i.EntityNameIn) > 0 {
		predicates = append(predicates, history.EntityNameIn(i.EntityNameIn...))
	}
	if len(i.EntityNameNotIn) > 0 {
		predicates = append(predicates, history.EntityNameNotIn(i.EntityNameNotIn...))
	}
	if i.EntityNameGT != nil {
		predicates = append(predicates, history.EntityNameGT(*i.EntityNameGT))
	}
	if i.EntityNameGTE != nil {
		predicates = append(predicates, history.EntityNameGTE(*i.EntityNameGTE))
	}
	if i.EntityNameLT != nil {
		predicates = append(predicates, history.EntityNameLT(*i.EntityNameLT))
	}
	if i.EntityNameLTE != nil {
		predicates = append(predicates, history.EntityNameLTE(*i.EntityNameLTE))
	}
	if i.EntityNameContains != nil {
		predicates = append(predicates, history.EntityNameContains(*i.EntityNameContains))
	}
	if i.EntityNameHasPrefix != nil {
		predicates = append(predicates, history.EntityNameHasPrefix(*i.EntityNameHasPrefix))
	}
	if i.EntityNameHasSuffix != nil {
		predicates = append(predicates, history.EntityNameHasSuffix(*i.EntityNameHasSuffix))
	}
	if i.EntityNameEqualFold != nil {
		predicates = append(predicates, history.EntityNameEqualFold(*i.EntityNameEqualFold))
	}
	if i.EntityNameContainsFold != nil {
		predicates = append(predicates, history.EntityNameContainsFold(*i.EntityNameContainsFold))
	}
	if i.RecordID != nil {
		predicates = append(predicates, history.RecordIDEQ(*i.RecordID))
	}
	if i.RecordIDNEQ != nil {
		predicates = append(predicates, history.RecordIDNEQ(*i.RecordIDNEQ))
	}
	if len(i.RecordIDIn) > 0 {
		predicates = append(predicates, history.RecordIDIn(i.RecordIDIn...))
	}
	if len(i.RecordIDNotIn) > 0 {
		predicates = append(predicates, history.RecordIDNotIn(i.RecordIDNotIn...))
	}
	if i.RecordIDGT != nil {
		predicates = append(predicates, history.RecordIDGT(*i.RecordIDGT))
	}
	if i.RecordIDGTE != nil {
		predicates = append(predicates, history.RecordIDGTE(*i.RecordIDGTE))
	}
	if i.RecordIDLT != nil {
		predicates = append(predicates, history.RecordIDLT(*i.RecordIDLT))
	}
	if i.RecordIDLTE != nil {
		predicates = append(predicates, history.RecordIDLTE(*i.RecordIDLTE))
	}
	if i.Timestamp != nil {
		predicates = append(predicates, history.TimestampEQ(*i.Timestamp))
	}
	if i.TimestampNEQ != nil {
		predicates = append(predicates, history.TimestampNEQ(*i.TimestampNEQ))
	}
	if len(i.TimestampIn) > 0 {
		predicates = append(predicates, history.TimestampIn(i.TimestampIn...))
	}
	if len(i.TimestampNotIn) > 0 {
		predicates = append(predicates, history.TimestampNotIn(i.TimestampNotIn...))
	}
	if i.TimestampGT != nil {
		predicates = append(predicates, history.TimestampGT(*i.TimestampGT))
	}
	if i.TimestampGTE != nil {
		predicates = append(predicates, history.TimestampGTE(*i.TimestampGTE))
	}
	if i.TimestampLT != nil {
		predicates = append(predicates, history.TimestampLT(*i.TimestampLT))
	}
	if i.TimestampLTE != nil {
		predicates = append(predicates, history.TimestampLTE(*i.TimestampLTE))
	}
	if i.Action != nil {
		predicates = append(predicates, history.ActionEQ(*i.Action))
	}
	if i.ActionNEQ != nil {
		predicates = append(predicates, history.ActionNEQ(*i.ActionNEQ))
	}
	if len(i.ActionIn) > 0 {
		predicates = append(predicates, history.ActionIn(i.ActionIn...))
	}
	if len(i.ActionNotIn) > 0 {
		predicates = append(predicates, history.ActionNotIn(i.ActionNotIn...))
	}

	if i.HasChanges != nil {
		p := history.HasChanges()
		if !*i.HasChanges {
			p = history.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChangesWith) > 0 {
		with := make([]predicate.Changes, 0, len(i.HasChangesWith))
		for _, w := range i.HasChangesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, history.HasChangesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/ariga/edit-twitter-example-app/ent: empty predicate HistoryWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return history.And(predicates...), nil
	}
}

// TweetWhereInput represents a where input for filtering Tweet queries.
type TweetWhereInput struct {
	Not *TweetWhereInput   `json:"not,omitempty"`
	Or  []*TweetWhereInput `json:"or,omitempty"`
	And []*TweetWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "created" field predicates.
	Created      *time.Time  `json:"created,omitempty"`
	CreatedNEQ   *time.Time  `json:"createdNEQ,omitempty"`
	CreatedIn    []time.Time `json:"createdIn,omitempty"`
	CreatedNotIn []time.Time `json:"createdNotIn,omitempty"`
	CreatedGT    *time.Time  `json:"createdGT,omitempty"`
	CreatedGTE   *time.Time  `json:"createdGTE,omitempty"`
	CreatedLT    *time.Time  `json:"createdLT,omitempty"`
	CreatedLTE   *time.Time  `json:"createdLTE,omitempty"`

	// "author" edge predicates.
	HasAuthor     *bool             `json:"hasAuthor,omitempty"`
	HasAuthorWith []*UserWhereInput `json:"hasAuthorWith,omitempty"`

	// "likes" edge predicates.
	HasLikes     *bool             `json:"hasLikes,omitempty"`
	HasLikesWith []*UserWhereInput `json:"hasLikesWith,omitempty"`
}

// Filter applies the TweetWhereInput filter on the TweetQuery builder.
func (i *TweetWhereInput) Filter(q *TweetQuery) (*TweetQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tweets.
// An error is returned if the input is empty or invalid.
func (i *TweetWhereInput) P() (predicate.Tweet, error) {
	var predicates []predicate.Tweet
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, tweet.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tweet, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, tweet.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tweet, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, tweet.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, tweet.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tweet.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tweet.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tweet.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tweet.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tweet.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tweet.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tweet.IDLTE(*i.IDLTE))
	}
	if i.Content != nil {
		predicates = append(predicates, tweet.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, tweet.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, tweet.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, tweet.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, tweet.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, tweet.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, tweet.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, tweet.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, tweet.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, tweet.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, tweet.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, tweet.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, tweet.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.Created != nil {
		predicates = append(predicates, tweet.CreatedEQ(*i.Created))
	}
	if i.CreatedNEQ != nil {
		predicates = append(predicates, tweet.CreatedNEQ(*i.CreatedNEQ))
	}
	if len(i.CreatedIn) > 0 {
		predicates = append(predicates, tweet.CreatedIn(i.CreatedIn...))
	}
	if len(i.CreatedNotIn) > 0 {
		predicates = append(predicates, tweet.CreatedNotIn(i.CreatedNotIn...))
	}
	if i.CreatedGT != nil {
		predicates = append(predicates, tweet.CreatedGT(*i.CreatedGT))
	}
	if i.CreatedGTE != nil {
		predicates = append(predicates, tweet.CreatedGTE(*i.CreatedGTE))
	}
	if i.CreatedLT != nil {
		predicates = append(predicates, tweet.CreatedLT(*i.CreatedLT))
	}
	if i.CreatedLTE != nil {
		predicates = append(predicates, tweet.CreatedLTE(*i.CreatedLTE))
	}

	if i.HasAuthor != nil {
		p := tweet.HasAuthor()
		if !*i.HasAuthor {
			p = tweet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthorWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasAuthorWith))
		for _, w := range i.HasAuthorWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tweet.HasAuthorWith(with...))
	}
	if i.HasLikes != nil {
		p := tweet.HasLikes()
		if !*i.HasLikes {
			p = tweet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikesWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasLikesWith))
		for _, w := range i.HasLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, tweet.HasLikesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/ariga/edit-twitter-example-app/ent: empty predicate TweetWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return tweet.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Not *UserWhereInput   `json:"not,omitempty"`
	Or  []*UserWhereInput `json:"or,omitempty"`
	And []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "role" field predicates.
	Role      *int8  `json:"role,omitempty"`
	RoleNEQ   *int8  `json:"roleNEQ,omitempty"`
	RoleIn    []int8 `json:"roleIn,omitempty"`
	RoleNotIn []int8 `json:"roleNotIn,omitempty"`
	RoleGT    *int8  `json:"roleGT,omitempty"`
	RoleGTE   *int8  `json:"roleGTE,omitempty"`
	RoleLT    *int8  `json:"roleLT,omitempty"`
	RoleLTE   *int8  `json:"roleLTE,omitempty"`

	// "created" field predicates.
	Created      *time.Time  `json:"created,omitempty"`
	CreatedNEQ   *time.Time  `json:"createdNEQ,omitempty"`
	CreatedIn    []time.Time `json:"createdIn,omitempty"`
	CreatedNotIn []time.Time `json:"createdNotIn,omitempty"`
	CreatedGT    *time.Time  `json:"createdGT,omitempty"`
	CreatedGTE   *time.Time  `json:"createdGTE,omitempty"`
	CreatedLT    *time.Time  `json:"createdLT,omitempty"`
	CreatedLTE   *time.Time  `json:"createdLTE,omitempty"`

	// "age" field predicates.
	Age       *int  `json:"age,omitempty"`
	AgeNEQ    *int  `json:"ageNEQ,omitempty"`
	AgeIn     []int `json:"ageIn,omitempty"`
	AgeNotIn  []int `json:"ageNotIn,omitempty"`
	AgeGT     *int  `json:"ageGT,omitempty"`
	AgeGTE    *int  `json:"ageGTE,omitempty"`
	AgeLT     *int  `json:"ageLT,omitempty"`
	AgeLTE    *int  `json:"ageLTE,omitempty"`
	AgeIsNil  bool  `json:"ageIsNil,omitempty"`
	AgeNotNil bool  `json:"ageNotNil,omitempty"`

	// "image_url" field predicates.
	ImageURL             *string  `json:"imageURL,omitempty"`
	ImageURLNEQ          *string  `json:"imageURLNEQ,omitempty"`
	ImageURLIn           []string `json:"imageURLIn,omitempty"`
	ImageURLNotIn        []string `json:"imageURLNotIn,omitempty"`
	ImageURLGT           *string  `json:"imageURLGT,omitempty"`
	ImageURLGTE          *string  `json:"imageURLGTE,omitempty"`
	ImageURLLT           *string  `json:"imageURLLT,omitempty"`
	ImageURLLTE          *string  `json:"imageURLLTE,omitempty"`
	ImageURLContains     *string  `json:"imageURLContains,omitempty"`
	ImageURLHasPrefix    *string  `json:"imageURLHasPrefix,omitempty"`
	ImageURLHasSuffix    *string  `json:"imageURLHasSuffix,omitempty"`
	ImageURLEqualFold    *string  `json:"imageURLEqualFold,omitempty"`
	ImageURLContainsFold *string  `json:"imageURLContainsFold,omitempty"`

	// "tweets" edge predicates.
	HasTweets     *bool              `json:"hasTweets,omitempty"`
	HasTweetsWith []*TweetWhereInput `json:"hasTweetsWith,omitempty"`

	// "followers" edge predicates.
	HasFollowers     *bool             `json:"hasFollowers,omitempty"`
	HasFollowersWith []*UserWhereInput `json:"hasFollowersWith,omitempty"`

	// "following" edge predicates.
	HasFollowing     *bool             `json:"hasFollowing,omitempty"`
	HasFollowingWith []*UserWhereInput `json:"hasFollowingWith,omitempty"`

	// "liked" edge predicates.
	HasLiked     *bool              `json:"hasLiked,omitempty"`
	HasLikedWith []*TweetWhereInput `json:"hasLikedWith,omitempty"`
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, user.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, user.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, user.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, user.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, user.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, user.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, user.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, user.RoleLTE(*i.RoleLTE))
	}
	if i.Created != nil {
		predicates = append(predicates, user.CreatedEQ(*i.Created))
	}
	if i.CreatedNEQ != nil {
		predicates = append(predicates, user.CreatedNEQ(*i.CreatedNEQ))
	}
	if len(i.CreatedIn) > 0 {
		predicates = append(predicates, user.CreatedIn(i.CreatedIn...))
	}
	if len(i.CreatedNotIn) > 0 {
		predicates = append(predicates, user.CreatedNotIn(i.CreatedNotIn...))
	}
	if i.CreatedGT != nil {
		predicates = append(predicates, user.CreatedGT(*i.CreatedGT))
	}
	if i.CreatedGTE != nil {
		predicates = append(predicates, user.CreatedGTE(*i.CreatedGTE))
	}
	if i.CreatedLT != nil {
		predicates = append(predicates, user.CreatedLT(*i.CreatedLT))
	}
	if i.CreatedLTE != nil {
		predicates = append(predicates, user.CreatedLTE(*i.CreatedLTE))
	}
	if i.Age != nil {
		predicates = append(predicates, user.AgeEQ(*i.Age))
	}
	if i.AgeNEQ != nil {
		predicates = append(predicates, user.AgeNEQ(*i.AgeNEQ))
	}
	if len(i.AgeIn) > 0 {
		predicates = append(predicates, user.AgeIn(i.AgeIn...))
	}
	if len(i.AgeNotIn) > 0 {
		predicates = append(predicates, user.AgeNotIn(i.AgeNotIn...))
	}
	if i.AgeGT != nil {
		predicates = append(predicates, user.AgeGT(*i.AgeGT))
	}
	if i.AgeGTE != nil {
		predicates = append(predicates, user.AgeGTE(*i.AgeGTE))
	}
	if i.AgeLT != nil {
		predicates = append(predicates, user.AgeLT(*i.AgeLT))
	}
	if i.AgeLTE != nil {
		predicates = append(predicates, user.AgeLTE(*i.AgeLTE))
	}
	if i.AgeIsNil {
		predicates = append(predicates, user.AgeIsNil())
	}
	if i.AgeNotNil {
		predicates = append(predicates, user.AgeNotNil())
	}
	if i.ImageURL != nil {
		predicates = append(predicates, user.ImageURLEQ(*i.ImageURL))
	}
	if i.ImageURLNEQ != nil {
		predicates = append(predicates, user.ImageURLNEQ(*i.ImageURLNEQ))
	}
	if len(i.ImageURLIn) > 0 {
		predicates = append(predicates, user.ImageURLIn(i.ImageURLIn...))
	}
	if len(i.ImageURLNotIn) > 0 {
		predicates = append(predicates, user.ImageURLNotIn(i.ImageURLNotIn...))
	}
	if i.ImageURLGT != nil {
		predicates = append(predicates, user.ImageURLGT(*i.ImageURLGT))
	}
	if i.ImageURLGTE != nil {
		predicates = append(predicates, user.ImageURLGTE(*i.ImageURLGTE))
	}
	if i.ImageURLLT != nil {
		predicates = append(predicates, user.ImageURLLT(*i.ImageURLLT))
	}
	if i.ImageURLLTE != nil {
		predicates = append(predicates, user.ImageURLLTE(*i.ImageURLLTE))
	}
	if i.ImageURLContains != nil {
		predicates = append(predicates, user.ImageURLContains(*i.ImageURLContains))
	}
	if i.ImageURLHasPrefix != nil {
		predicates = append(predicates, user.ImageURLHasPrefix(*i.ImageURLHasPrefix))
	}
	if i.ImageURLHasSuffix != nil {
		predicates = append(predicates, user.ImageURLHasSuffix(*i.ImageURLHasSuffix))
	}
	if i.ImageURLEqualFold != nil {
		predicates = append(predicates, user.ImageURLEqualFold(*i.ImageURLEqualFold))
	}
	if i.ImageURLContainsFold != nil {
		predicates = append(predicates, user.ImageURLContainsFold(*i.ImageURLContainsFold))
	}

	if i.HasTweets != nil {
		p := user.HasTweets()
		if !*i.HasTweets {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTweetsWith) > 0 {
		with := make([]predicate.Tweet, 0, len(i.HasTweetsWith))
		for _, w := range i.HasTweetsWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasTweetsWith(with...))
	}
	if i.HasFollowers != nil {
		p := user.HasFollowers()
		if !*i.HasFollowers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowersWith))
		for _, w := range i.HasFollowersWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowersWith(with...))
	}
	if i.HasFollowing != nil {
		p := user.HasFollowing()
		if !*i.HasFollowing {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowingWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowingWith))
		for _, w := range i.HasFollowingWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowingWith(with...))
	}
	if i.HasLiked != nil {
		p := user.HasLiked()
		if !*i.HasLiked {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikedWith) > 0 {
		with := make([]predicate.Tweet, 0, len(i.HasLikedWith))
		for _, w := range i.HasLikedWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasLikedWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/ariga/edit-twitter-example-app/ent: empty predicate UserWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
