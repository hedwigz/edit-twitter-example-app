// Code generated by entc, DO NOT EDIT.

package changes

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ariga/edit-twitter-example-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Column applies equality check predicate on the "column" field. It's identical to ColumnEQ.
func Column(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumn), v))
	})
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// Previous applies equality check predicate on the "previous" field. It's identical to PreviousEQ.
func Previous(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrevious), v))
	})
}

// ColumnEQ applies the EQ predicate on the "column" field.
func ColumnEQ(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumn), v))
	})
}

// ColumnNEQ applies the NEQ predicate on the "column" field.
func ColumnNEQ(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldColumn), v))
	})
}

// ColumnIn applies the In predicate on the "column" field.
func ColumnIn(vs ...string) predicate.Changes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldColumn), v...))
	})
}

// ColumnNotIn applies the NotIn predicate on the "column" field.
func ColumnNotIn(vs ...string) predicate.Changes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldColumn), v...))
	})
}

// ColumnGT applies the GT predicate on the "column" field.
func ColumnGT(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldColumn), v))
	})
}

// ColumnGTE applies the GTE predicate on the "column" field.
func ColumnGTE(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldColumn), v))
	})
}

// ColumnLT applies the LT predicate on the "column" field.
func ColumnLT(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldColumn), v))
	})
}

// ColumnLTE applies the LTE predicate on the "column" field.
func ColumnLTE(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldColumn), v))
	})
}

// ColumnContains applies the Contains predicate on the "column" field.
func ColumnContains(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldColumn), v))
	})
}

// ColumnHasPrefix applies the HasPrefix predicate on the "column" field.
func ColumnHasPrefix(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldColumn), v))
	})
}

// ColumnHasSuffix applies the HasSuffix predicate on the "column" field.
func ColumnHasSuffix(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldColumn), v))
	})
}

// ColumnEqualFold applies the EqualFold predicate on the "column" field.
func ColumnEqualFold(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldColumn), v))
	})
}

// ColumnContainsFold applies the ContainsFold predicate on the "column" field.
func ColumnContainsFold(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldColumn), v))
	})
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValue), v))
	})
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Changes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldValue), v...))
	})
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Changes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldValue), v...))
	})
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValue), v))
	})
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValue), v))
	})
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValue), v))
	})
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValue), v))
	})
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldValue), v))
	})
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldValue), v))
	})
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldValue), v))
	})
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldValue), v))
	})
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldValue), v))
	})
}

// PreviousEQ applies the EQ predicate on the "previous" field.
func PreviousEQ(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrevious), v))
	})
}

// PreviousNEQ applies the NEQ predicate on the "previous" field.
func PreviousNEQ(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrevious), v))
	})
}

// PreviousIn applies the In predicate on the "previous" field.
func PreviousIn(vs ...string) predicate.Changes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrevious), v...))
	})
}

// PreviousNotIn applies the NotIn predicate on the "previous" field.
func PreviousNotIn(vs ...string) predicate.Changes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Changes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrevious), v...))
	})
}

// PreviousGT applies the GT predicate on the "previous" field.
func PreviousGT(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrevious), v))
	})
}

// PreviousGTE applies the GTE predicate on the "previous" field.
func PreviousGTE(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrevious), v))
	})
}

// PreviousLT applies the LT predicate on the "previous" field.
func PreviousLT(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrevious), v))
	})
}

// PreviousLTE applies the LTE predicate on the "previous" field.
func PreviousLTE(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrevious), v))
	})
}

// PreviousContains applies the Contains predicate on the "previous" field.
func PreviousContains(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrevious), v))
	})
}

// PreviousHasPrefix applies the HasPrefix predicate on the "previous" field.
func PreviousHasPrefix(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrevious), v))
	})
}

// PreviousHasSuffix applies the HasSuffix predicate on the "previous" field.
func PreviousHasSuffix(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrevious), v))
	})
}

// PreviousIsNil applies the IsNil predicate on the "previous" field.
func PreviousIsNil() predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrevious)))
	})
}

// PreviousNotNil applies the NotNil predicate on the "previous" field.
func PreviousNotNil() predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrevious)))
	})
}

// PreviousEqualFold applies the EqualFold predicate on the "previous" field.
func PreviousEqualFold(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrevious), v))
	})
}

// PreviousContainsFold applies the ContainsFold predicate on the "previous" field.
func PreviousContainsFold(v string) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrevious), v))
	})
}

// HasOperation applies the HasEdge predicate on the "operation" edge.
func HasOperation() predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OperationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OperationTable, OperationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperationWith applies the HasEdge predicate on the "operation" edge with a given conditions (other predicates).
func HasOperationWith(preds ...predicate.History) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OperationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OperationTable, OperationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Changes) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Changes) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Changes) predicate.Changes {
	return predicate.Changes(func(s *sql.Selector) {
		p(s.Not())
	})
}
