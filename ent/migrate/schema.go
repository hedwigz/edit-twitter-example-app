// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChangesColumns holds the columns for the "changes" table.
	ChangesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "column", Type: field.TypeString},
		{Name: "value", Type: field.TypeString, Size: 2147483647},
		{Name: "previous", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "history_changes", Type: field.TypeInt, Nullable: true},
	}
	// ChangesTable holds the schema information for the "changes" table.
	ChangesTable = &schema.Table{
		Name:       "changes",
		Columns:    ChangesColumns,
		PrimaryKey: []*schema.Column{ChangesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "changes_histories_changes",
				Columns:    []*schema.Column{ChangesColumns[4]},
				RefColumns: []*schema.Column{HistoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HistoriesColumns holds the columns for the "histories" table.
	HistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "entity_name", Type: field.TypeString},
		{Name: "record_id", Type: field.TypeInt},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "action", Type: field.TypeEnum, Enums: []string{"CREATE", "UPDATE", "DELETE"}},
	}
	// HistoriesTable holds the schema information for the "histories" table.
	HistoriesTable = &schema.Table{
		Name:       "histories",
		Columns:    HistoriesColumns,
		PrimaryKey: []*schema.Column{HistoriesColumns[0]},
	}
	// TweetsColumns holds the columns for the "tweets" table.
	TweetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString},
		{Name: "created", Type: field.TypeTime},
		{Name: "user_tweets", Type: field.TypeInt, Nullable: true},
	}
	// TweetsTable holds the schema information for the "tweets" table.
	TweetsTable = &schema.Table{
		Name:       "tweets",
		Columns:    TweetsColumns,
		PrimaryKey: []*schema.Column{TweetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tweets_users_tweets",
				Columns:    []*schema.Column{TweetsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "role", Type: field.TypeInt8},
		{Name: "created", Type: field.TypeTime},
		{Name: "age", Type: field.TypeInt, Nullable: true},
		{Name: "image_url", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// TweetLikesColumns holds the columns for the "tweet_likes" table.
	TweetLikesColumns = []*schema.Column{
		{Name: "tweet_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// TweetLikesTable holds the schema information for the "tweet_likes" table.
	TweetLikesTable = &schema.Table{
		Name:       "tweet_likes",
		Columns:    TweetLikesColumns,
		PrimaryKey: []*schema.Column{TweetLikesColumns[0], TweetLikesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tweet_likes_tweet_id",
				Columns:    []*schema.Column{TweetLikesColumns[0]},
				RefColumns: []*schema.Column{TweetsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tweet_likes_user_id",
				Columns:    []*schema.Column{TweetLikesColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFollowingColumns holds the columns for the "user_following" table.
	UserFollowingColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "follower_id", Type: field.TypeInt},
	}
	// UserFollowingTable holds the schema information for the "user_following" table.
	UserFollowingTable = &schema.Table{
		Name:       "user_following",
		Columns:    UserFollowingColumns,
		PrimaryKey: []*schema.Column{UserFollowingColumns[0], UserFollowingColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_following_user_id",
				Columns:    []*schema.Column{UserFollowingColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_following_follower_id",
				Columns:    []*schema.Column{UserFollowingColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChangesTable,
		HistoriesTable,
		TweetsTable,
		UsersTable,
		TweetLikesTable,
		UserFollowingTable,
	}
)

func init() {
	ChangesTable.ForeignKeys[0].RefTable = HistoriesTable
	TweetsTable.ForeignKeys[0].RefTable = UsersTable
	TweetLikesTable.ForeignKeys[0].RefTable = TweetsTable
	TweetLikesTable.ForeignKeys[1].RefTable = UsersTable
	UserFollowingTable.ForeignKeys[0].RefTable = UsersTable
	UserFollowingTable.ForeignKeys[1].RefTable = UsersTable
}
