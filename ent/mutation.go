// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/ariga/edit-twitter-example-app/ent/changes"
	"github.com/ariga/edit-twitter-example-app/ent/history"
	"github.com/ariga/edit-twitter-example-app/ent/predicate"
	"github.com/ariga/edit-twitter-example-app/ent/tweet"
	"github.com/ariga/edit-twitter-example-app/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChanges = "Changes"
	TypeHistory = "History"
	TypeTweet   = "Tweet"
	TypeUser    = "User"
)

// ChangesMutation represents an operation that mutates the Changes nodes in the graph.
type ChangesMutation struct {
	config
	op               Op
	typ              string
	id               *int
	column           *string
	value            *string
	previous         *string
	clearedFields    map[string]struct{}
	operation        *int
	clearedoperation bool
	done             bool
	oldValue         func(context.Context) (*Changes, error)
	predicates       []predicate.Changes
}

var _ ent.Mutation = (*ChangesMutation)(nil)

// changesOption allows management of the mutation configuration using functional options.
type changesOption func(*ChangesMutation)

// newChangesMutation creates new mutation for the Changes entity.
func newChangesMutation(c config, op Op, opts ...changesOption) *ChangesMutation {
	m := &ChangesMutation{
		config:        c,
		op:            op,
		typ:           TypeChanges,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChangesID sets the ID field of the mutation.
func withChangesID(id int) changesOption {
	return func(m *ChangesMutation) {
		var (
			err   error
			once  sync.Once
			value *Changes
		)
		m.oldValue = func(ctx context.Context) (*Changes, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Changes.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChanges sets the old Changes of the mutation.
func withChanges(node *Changes) changesOption {
	return func(m *ChangesMutation) {
		m.oldValue = func(context.Context) (*Changes, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChangesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChangesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChangesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChangesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Changes.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetColumn sets the "column" field.
func (m *ChangesMutation) SetColumn(s string) {
	m.column = &s
}

// Column returns the value of the "column" field in the mutation.
func (m *ChangesMutation) Column() (r string, exists bool) {
	v := m.column
	if v == nil {
		return
	}
	return *v, true
}

// OldColumn returns the old "column" field's value of the Changes entity.
// If the Changes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesMutation) OldColumn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColumn: %w", err)
	}
	return oldValue.Column, nil
}

// ResetColumn resets all changes to the "column" field.
func (m *ChangesMutation) ResetColumn() {
	m.column = nil
}

// SetValue sets the "value" field.
func (m *ChangesMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *ChangesMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Changes entity.
// If the Changes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *ChangesMutation) ResetValue() {
	m.value = nil
}

// SetPrevious sets the "previous" field.
func (m *ChangesMutation) SetPrevious(s string) {
	m.previous = &s
}

// Previous returns the value of the "previous" field in the mutation.
func (m *ChangesMutation) Previous() (r string, exists bool) {
	v := m.previous
	if v == nil {
		return
	}
	return *v, true
}

// OldPrevious returns the old "previous" field's value of the Changes entity.
// If the Changes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesMutation) OldPrevious(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrevious is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrevious requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrevious: %w", err)
	}
	return oldValue.Previous, nil
}

// ClearPrevious clears the value of the "previous" field.
func (m *ChangesMutation) ClearPrevious() {
	m.previous = nil
	m.clearedFields[changes.FieldPrevious] = struct{}{}
}

// PreviousCleared returns if the "previous" field was cleared in this mutation.
func (m *ChangesMutation) PreviousCleared() bool {
	_, ok := m.clearedFields[changes.FieldPrevious]
	return ok
}

// ResetPrevious resets all changes to the "previous" field.
func (m *ChangesMutation) ResetPrevious() {
	m.previous = nil
	delete(m.clearedFields, changes.FieldPrevious)
}

// SetOperationID sets the "operation" edge to the History entity by id.
func (m *ChangesMutation) SetOperationID(id int) {
	m.operation = &id
}

// ClearOperation clears the "operation" edge to the History entity.
func (m *ChangesMutation) ClearOperation() {
	m.clearedoperation = true
}

// OperationCleared reports if the "operation" edge to the History entity was cleared.
func (m *ChangesMutation) OperationCleared() bool {
	return m.clearedoperation
}

// OperationID returns the "operation" edge ID in the mutation.
func (m *ChangesMutation) OperationID() (id int, exists bool) {
	if m.operation != nil {
		return *m.operation, true
	}
	return
}

// OperationIDs returns the "operation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OperationID instead. It exists only for internal usage by the builders.
func (m *ChangesMutation) OperationIDs() (ids []int) {
	if id := m.operation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperation resets all changes to the "operation" edge.
func (m *ChangesMutation) ResetOperation() {
	m.operation = nil
	m.clearedoperation = false
}

// Where appends a list predicates to the ChangesMutation builder.
func (m *ChangesMutation) Where(ps ...predicate.Changes) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChangesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Changes).
func (m *ChangesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChangesMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.column != nil {
		fields = append(fields, changes.FieldColumn)
	}
	if m.value != nil {
		fields = append(fields, changes.FieldValue)
	}
	if m.previous != nil {
		fields = append(fields, changes.FieldPrevious)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChangesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case changes.FieldColumn:
		return m.Column()
	case changes.FieldValue:
		return m.Value()
	case changes.FieldPrevious:
		return m.Previous()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChangesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case changes.FieldColumn:
		return m.OldColumn(ctx)
	case changes.FieldValue:
		return m.OldValue(ctx)
	case changes.FieldPrevious:
		return m.OldPrevious(ctx)
	}
	return nil, fmt.Errorf("unknown Changes field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChangesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case changes.FieldColumn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColumn(v)
		return nil
	case changes.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case changes.FieldPrevious:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrevious(v)
		return nil
	}
	return fmt.Errorf("unknown Changes field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChangesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChangesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChangesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Changes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChangesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(changes.FieldPrevious) {
		fields = append(fields, changes.FieldPrevious)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChangesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChangesMutation) ClearField(name string) error {
	switch name {
	case changes.FieldPrevious:
		m.ClearPrevious()
		return nil
	}
	return fmt.Errorf("unknown Changes nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChangesMutation) ResetField(name string) error {
	switch name {
	case changes.FieldColumn:
		m.ResetColumn()
		return nil
	case changes.FieldValue:
		m.ResetValue()
		return nil
	case changes.FieldPrevious:
		m.ResetPrevious()
		return nil
	}
	return fmt.Errorf("unknown Changes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChangesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.operation != nil {
		edges = append(edges, changes.EdgeOperation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChangesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case changes.EdgeOperation:
		if id := m.operation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChangesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChangesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChangesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedoperation {
		edges = append(edges, changes.EdgeOperation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChangesMutation) EdgeCleared(name string) bool {
	switch name {
	case changes.EdgeOperation:
		return m.clearedoperation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChangesMutation) ClearEdge(name string) error {
	switch name {
	case changes.EdgeOperation:
		m.ClearOperation()
		return nil
	}
	return fmt.Errorf("unknown Changes unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChangesMutation) ResetEdge(name string) error {
	switch name {
	case changes.EdgeOperation:
		m.ResetOperation()
		return nil
	}
	return fmt.Errorf("unknown Changes edge %s", name)
}

// HistoryMutation represents an operation that mutates the History nodes in the graph.
type HistoryMutation struct {
	config
	op             Op
	typ            string
	id             *int
	entity_name    *string
	record_id      *int
	addrecord_id   *int
	timestamp      *time.Time
	action         *history.Action
	clearedFields  map[string]struct{}
	changes        map[int]struct{}
	removedchanges map[int]struct{}
	clearedchanges bool
	done           bool
	oldValue       func(context.Context) (*History, error)
	predicates     []predicate.History
}

var _ ent.Mutation = (*HistoryMutation)(nil)

// historyOption allows management of the mutation configuration using functional options.
type historyOption func(*HistoryMutation)

// newHistoryMutation creates new mutation for the History entity.
func newHistoryMutation(c config, op Op, opts ...historyOption) *HistoryMutation {
	m := &HistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistoryID sets the ID field of the mutation.
func withHistoryID(id int) historyOption {
	return func(m *HistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *History
		)
		m.oldValue = func(ctx context.Context) (*History, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().History.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistory sets the old History of the mutation.
func withHistory(node *History) historyOption {
	return func(m *HistoryMutation) {
		m.oldValue = func(context.Context) (*History, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().History.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntityName sets the "entity_name" field.
func (m *HistoryMutation) SetEntityName(s string) {
	m.entity_name = &s
}

// EntityName returns the value of the "entity_name" field in the mutation.
func (m *HistoryMutation) EntityName() (r string, exists bool) {
	v := m.entity_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityName returns the old "entity_name" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldEntityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityName: %w", err)
	}
	return oldValue.EntityName, nil
}

// ResetEntityName resets all changes to the "entity_name" field.
func (m *HistoryMutation) ResetEntityName() {
	m.entity_name = nil
}

// SetRecordID sets the "record_id" field.
func (m *HistoryMutation) SetRecordID(i int) {
	m.record_id = &i
	m.addrecord_id = nil
}

// RecordID returns the value of the "record_id" field in the mutation.
func (m *HistoryMutation) RecordID() (r int, exists bool) {
	v := m.record_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordID returns the old "record_id" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldRecordID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecordID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecordID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordID: %w", err)
	}
	return oldValue.RecordID, nil
}

// AddRecordID adds i to the "record_id" field.
func (m *HistoryMutation) AddRecordID(i int) {
	if m.addrecord_id != nil {
		*m.addrecord_id += i
	} else {
		m.addrecord_id = &i
	}
}

// AddedRecordID returns the value that was added to the "record_id" field in this mutation.
func (m *HistoryMutation) AddedRecordID() (r int, exists bool) {
	v := m.addrecord_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecordID resets all changes to the "record_id" field.
func (m *HistoryMutation) ResetRecordID() {
	m.record_id = nil
	m.addrecord_id = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *HistoryMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *HistoryMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *HistoryMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetAction sets the "action" field.
func (m *HistoryMutation) SetAction(h history.Action) {
	m.action = &h
}

// Action returns the value of the "action" field in the mutation.
func (m *HistoryMutation) Action() (r history.Action, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldAction(ctx context.Context) (v history.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *HistoryMutation) ResetAction() {
	m.action = nil
}

// AddChangeIDs adds the "changes" edge to the Changes entity by ids.
func (m *HistoryMutation) AddChangeIDs(ids ...int) {
	if m.changes == nil {
		m.changes = make(map[int]struct{})
	}
	for i := range ids {
		m.changes[ids[i]] = struct{}{}
	}
}

// ClearChanges clears the "changes" edge to the Changes entity.
func (m *HistoryMutation) ClearChanges() {
	m.clearedchanges = true
}

// ChangesCleared reports if the "changes" edge to the Changes entity was cleared.
func (m *HistoryMutation) ChangesCleared() bool {
	return m.clearedchanges
}

// RemoveChangeIDs removes the "changes" edge to the Changes entity by IDs.
func (m *HistoryMutation) RemoveChangeIDs(ids ...int) {
	if m.removedchanges == nil {
		m.removedchanges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.changes, ids[i])
		m.removedchanges[ids[i]] = struct{}{}
	}
}

// RemovedChanges returns the removed IDs of the "changes" edge to the Changes entity.
func (m *HistoryMutation) RemovedChangesIDs() (ids []int) {
	for id := range m.removedchanges {
		ids = append(ids, id)
	}
	return
}

// ChangesIDs returns the "changes" edge IDs in the mutation.
func (m *HistoryMutation) ChangesIDs() (ids []int) {
	for id := range m.changes {
		ids = append(ids, id)
	}
	return
}

// ResetChanges resets all changes to the "changes" edge.
func (m *HistoryMutation) ResetChanges() {
	m.changes = nil
	m.clearedchanges = false
	m.removedchanges = nil
}

// Where appends a list predicates to the HistoryMutation builder.
func (m *HistoryMutation) Where(ps ...predicate.History) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HistoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (History).
func (m *HistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistoryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.entity_name != nil {
		fields = append(fields, history.FieldEntityName)
	}
	if m.record_id != nil {
		fields = append(fields, history.FieldRecordID)
	}
	if m.timestamp != nil {
		fields = append(fields, history.FieldTimestamp)
	}
	if m.action != nil {
		fields = append(fields, history.FieldAction)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case history.FieldEntityName:
		return m.EntityName()
	case history.FieldRecordID:
		return m.RecordID()
	case history.FieldTimestamp:
		return m.Timestamp()
	case history.FieldAction:
		return m.Action()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case history.FieldEntityName:
		return m.OldEntityName(ctx)
	case history.FieldRecordID:
		return m.OldRecordID(ctx)
	case history.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case history.FieldAction:
		return m.OldAction(ctx)
	}
	return nil, fmt.Errorf("unknown History field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case history.FieldEntityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityName(v)
		return nil
	case history.FieldRecordID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordID(v)
		return nil
	case history.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case history.FieldAction:
		v, ok := value.(history.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistoryMutation) AddedFields() []string {
	var fields []string
	if m.addrecord_id != nil {
		fields = append(fields, history.FieldRecordID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case history.FieldRecordID:
		return m.AddedRecordID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case history.FieldRecordID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecordID(v)
		return nil
	}
	return fmt.Errorf("unknown History numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown History nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistoryMutation) ResetField(name string) error {
	switch name {
	case history.FieldEntityName:
		m.ResetEntityName()
		return nil
	case history.FieldRecordID:
		m.ResetRecordID()
		return nil
	case history.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case history.FieldAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.changes != nil {
		edges = append(edges, history.EdgeChanges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case history.EdgeChanges:
		ids := make([]ent.Value, 0, len(m.changes))
		for id := range m.changes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedchanges != nil {
		edges = append(edges, history.EdgeChanges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case history.EdgeChanges:
		ids := make([]ent.Value, 0, len(m.removedchanges))
		for id := range m.removedchanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchanges {
		edges = append(edges, history.EdgeChanges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case history.EdgeChanges:
		return m.clearedchanges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown History unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistoryMutation) ResetEdge(name string) error {
	switch name {
	case history.EdgeChanges:
		m.ResetChanges()
		return nil
	}
	return fmt.Errorf("unknown History edge %s", name)
}

// TweetMutation represents an operation that mutates the Tweet nodes in the graph.
type TweetMutation struct {
	config
	op            Op
	typ           string
	id            *int
	content       *string
	created       *time.Time
	clearedFields map[string]struct{}
	author        *int
	clearedauthor bool
	likes         map[int]struct{}
	removedlikes  map[int]struct{}
	clearedlikes  bool
	done          bool
	oldValue      func(context.Context) (*Tweet, error)
	predicates    []predicate.Tweet
}

var _ ent.Mutation = (*TweetMutation)(nil)

// tweetOption allows management of the mutation configuration using functional options.
type tweetOption func(*TweetMutation)

// newTweetMutation creates new mutation for the Tweet entity.
func newTweetMutation(c config, op Op, opts ...tweetOption) *TweetMutation {
	m := &TweetMutation{
		config:        c,
		op:            op,
		typ:           TypeTweet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTweetID sets the ID field of the mutation.
func withTweetID(id int) tweetOption {
	return func(m *TweetMutation) {
		var (
			err   error
			once  sync.Once
			value *Tweet
		)
		m.oldValue = func(ctx context.Context) (*Tweet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tweet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTweet sets the old Tweet of the mutation.
func withTweet(node *Tweet) tweetOption {
	return func(m *TweetMutation) {
		m.oldValue = func(context.Context) (*Tweet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TweetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TweetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TweetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TweetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tweet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetContent sets the "content" field.
func (m *TweetMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TweetMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TweetMutation) ResetContent() {
	m.content = nil
}

// SetCreated sets the "created" field.
func (m *TweetMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *TweetMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *TweetMutation) ResetCreated() {
	m.created = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *TweetMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *TweetMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *TweetMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *TweetMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *TweetMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *TweetMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// AddLikeIDs adds the "likes" edge to the User entity by ids.
func (m *TweetMutation) AddLikeIDs(ids ...int) {
	if m.likes == nil {
		m.likes = make(map[int]struct{})
	}
	for i := range ids {
		m.likes[ids[i]] = struct{}{}
	}
}

// ClearLikes clears the "likes" edge to the User entity.
func (m *TweetMutation) ClearLikes() {
	m.clearedlikes = true
}

// LikesCleared reports if the "likes" edge to the User entity was cleared.
func (m *TweetMutation) LikesCleared() bool {
	return m.clearedlikes
}

// RemoveLikeIDs removes the "likes" edge to the User entity by IDs.
func (m *TweetMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlikes == nil {
		m.removedlikes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likes, ids[i])
		m.removedlikes[ids[i]] = struct{}{}
	}
}

// RemovedLikes returns the removed IDs of the "likes" edge to the User entity.
func (m *TweetMutation) RemovedLikesIDs() (ids []int) {
	for id := range m.removedlikes {
		ids = append(ids, id)
	}
	return
}

// LikesIDs returns the "likes" edge IDs in the mutation.
func (m *TweetMutation) LikesIDs() (ids []int) {
	for id := range m.likes {
		ids = append(ids, id)
	}
	return
}

// ResetLikes resets all changes to the "likes" edge.
func (m *TweetMutation) ResetLikes() {
	m.likes = nil
	m.clearedlikes = false
	m.removedlikes = nil
}

// Where appends a list predicates to the TweetMutation builder.
func (m *TweetMutation) Where(ps ...predicate.Tweet) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TweetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tweet).
func (m *TweetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TweetMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.content != nil {
		fields = append(fields, tweet.FieldContent)
	}
	if m.created != nil {
		fields = append(fields, tweet.FieldCreated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TweetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tweet.FieldContent:
		return m.Content()
	case tweet.FieldCreated:
		return m.Created()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TweetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tweet.FieldContent:
		return m.OldContent(ctx)
	case tweet.FieldCreated:
		return m.OldCreated(ctx)
	}
	return nil, fmt.Errorf("unknown Tweet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tweet.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case tweet.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TweetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TweetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tweet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TweetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TweetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TweetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tweet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TweetMutation) ResetField(name string) error {
	switch name {
	case tweet.FieldContent:
		m.ResetContent()
		return nil
	case tweet.FieldCreated:
		m.ResetCreated()
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TweetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, tweet.EdgeAuthor)
	}
	if m.likes != nil {
		edges = append(edges, tweet.EdgeLikes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TweetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tweet.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case tweet.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.likes))
		for id := range m.likes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TweetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedlikes != nil {
		edges = append(edges, tweet.EdgeLikes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TweetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tweet.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.removedlikes))
		for id := range m.removedlikes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TweetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, tweet.EdgeAuthor)
	}
	if m.clearedlikes {
		edges = append(edges, tweet.EdgeLikes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TweetMutation) EdgeCleared(name string) bool {
	switch name {
	case tweet.EdgeAuthor:
		return m.clearedauthor
	case tweet.EdgeLikes:
		return m.clearedlikes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TweetMutation) ClearEdge(name string) error {
	switch name {
	case tweet.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Tweet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TweetMutation) ResetEdge(name string) error {
	switch name {
	case tweet.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case tweet.EdgeLikes:
		m.ResetLikes()
		return nil
	}
	return fmt.Errorf("unknown Tweet edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	email            *string
	role             *int8
	addrole          *int8
	created          *time.Time
	age              *int
	addage           *int
	image_url        *string
	clearedFields    map[string]struct{}
	tweets           map[int]struct{}
	removedtweets    map[int]struct{}
	clearedtweets    bool
	followers        map[int]struct{}
	removedfollowers map[int]struct{}
	clearedfollowers bool
	following        map[int]struct{}
	removedfollowing map[int]struct{}
	clearedfollowing bool
	liked            map[int]struct{}
	removedliked     map[int]struct{}
	clearedliked     bool
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(i int8) {
	m.role = &i
	m.addrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r int8, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// AddRole adds i to the "role" field.
func (m *UserMutation) AddRole(i int8) {
	if m.addrole != nil {
		*m.addrole += i
	} else {
		m.addrole = &i
	}
}

// AddedRole returns the value that was added to the "role" field in this mutation.
func (m *UserMutation) AddedRole() (r int8, exists bool) {
	v := m.addrole
	if v == nil {
		return
	}
	return *v, true
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
	m.addrole = nil
}

// SetCreated sets the "created" field.
func (m *UserMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *UserMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *UserMutation) ResetCreated() {
	m.created = nil
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *UserMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[user.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *UserMutation) AgeCleared() bool {
	_, ok := m.clearedFields[user.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, user.FieldAge)
}

// SetImageURL sets the "image_url" field.
func (m *UserMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *UserMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *UserMutation) ResetImageURL() {
	m.image_url = nil
}

// AddTweetIDs adds the "tweets" edge to the Tweet entity by ids.
func (m *UserMutation) AddTweetIDs(ids ...int) {
	if m.tweets == nil {
		m.tweets = make(map[int]struct{})
	}
	for i := range ids {
		m.tweets[ids[i]] = struct{}{}
	}
}

// ClearTweets clears the "tweets" edge to the Tweet entity.
func (m *UserMutation) ClearTweets() {
	m.clearedtweets = true
}

// TweetsCleared reports if the "tweets" edge to the Tweet entity was cleared.
func (m *UserMutation) TweetsCleared() bool {
	return m.clearedtweets
}

// RemoveTweetIDs removes the "tweets" edge to the Tweet entity by IDs.
func (m *UserMutation) RemoveTweetIDs(ids ...int) {
	if m.removedtweets == nil {
		m.removedtweets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tweets, ids[i])
		m.removedtweets[ids[i]] = struct{}{}
	}
}

// RemovedTweets returns the removed IDs of the "tweets" edge to the Tweet entity.
func (m *UserMutation) RemovedTweetsIDs() (ids []int) {
	for id := range m.removedtweets {
		ids = append(ids, id)
	}
	return
}

// TweetsIDs returns the "tweets" edge IDs in the mutation.
func (m *UserMutation) TweetsIDs() (ids []int) {
	for id := range m.tweets {
		ids = append(ids, id)
	}
	return
}

// ResetTweets resets all changes to the "tweets" edge.
func (m *UserMutation) ResetTweets() {
	m.tweets = nil
	m.clearedtweets = false
	m.removedtweets = nil
}

// AddFollowerIDs adds the "followers" edge to the User entity by ids.
func (m *UserMutation) AddFollowerIDs(ids ...int) {
	if m.followers == nil {
		m.followers = make(map[int]struct{})
	}
	for i := range ids {
		m.followers[ids[i]] = struct{}{}
	}
}

// ClearFollowers clears the "followers" edge to the User entity.
func (m *UserMutation) ClearFollowers() {
	m.clearedfollowers = true
}

// FollowersCleared reports if the "followers" edge to the User entity was cleared.
func (m *UserMutation) FollowersCleared() bool {
	return m.clearedfollowers
}

// RemoveFollowerIDs removes the "followers" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowerIDs(ids ...int) {
	if m.removedfollowers == nil {
		m.removedfollowers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.followers, ids[i])
		m.removedfollowers[ids[i]] = struct{}{}
	}
}

// RemovedFollowers returns the removed IDs of the "followers" edge to the User entity.
func (m *UserMutation) RemovedFollowersIDs() (ids []int) {
	for id := range m.removedfollowers {
		ids = append(ids, id)
	}
	return
}

// FollowersIDs returns the "followers" edge IDs in the mutation.
func (m *UserMutation) FollowersIDs() (ids []int) {
	for id := range m.followers {
		ids = append(ids, id)
	}
	return
}

// ResetFollowers resets all changes to the "followers" edge.
func (m *UserMutation) ResetFollowers() {
	m.followers = nil
	m.clearedfollowers = false
	m.removedfollowers = nil
}

// AddFollowingIDs adds the "following" edge to the User entity by ids.
func (m *UserMutation) AddFollowingIDs(ids ...int) {
	if m.following == nil {
		m.following = make(map[int]struct{})
	}
	for i := range ids {
		m.following[ids[i]] = struct{}{}
	}
}

// ClearFollowing clears the "following" edge to the User entity.
func (m *UserMutation) ClearFollowing() {
	m.clearedfollowing = true
}

// FollowingCleared reports if the "following" edge to the User entity was cleared.
func (m *UserMutation) FollowingCleared() bool {
	return m.clearedfollowing
}

// RemoveFollowingIDs removes the "following" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowingIDs(ids ...int) {
	if m.removedfollowing == nil {
		m.removedfollowing = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.following, ids[i])
		m.removedfollowing[ids[i]] = struct{}{}
	}
}

// RemovedFollowing returns the removed IDs of the "following" edge to the User entity.
func (m *UserMutation) RemovedFollowingIDs() (ids []int) {
	for id := range m.removedfollowing {
		ids = append(ids, id)
	}
	return
}

// FollowingIDs returns the "following" edge IDs in the mutation.
func (m *UserMutation) FollowingIDs() (ids []int) {
	for id := range m.following {
		ids = append(ids, id)
	}
	return
}

// ResetFollowing resets all changes to the "following" edge.
func (m *UserMutation) ResetFollowing() {
	m.following = nil
	m.clearedfollowing = false
	m.removedfollowing = nil
}

// AddLikedIDs adds the "liked" edge to the Tweet entity by ids.
func (m *UserMutation) AddLikedIDs(ids ...int) {
	if m.liked == nil {
		m.liked = make(map[int]struct{})
	}
	for i := range ids {
		m.liked[ids[i]] = struct{}{}
	}
}

// ClearLiked clears the "liked" edge to the Tweet entity.
func (m *UserMutation) ClearLiked() {
	m.clearedliked = true
}

// LikedCleared reports if the "liked" edge to the Tweet entity was cleared.
func (m *UserMutation) LikedCleared() bool {
	return m.clearedliked
}

// RemoveLikedIDs removes the "liked" edge to the Tweet entity by IDs.
func (m *UserMutation) RemoveLikedIDs(ids ...int) {
	if m.removedliked == nil {
		m.removedliked = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked, ids[i])
		m.removedliked[ids[i]] = struct{}{}
	}
}

// RemovedLiked returns the removed IDs of the "liked" edge to the Tweet entity.
func (m *UserMutation) RemovedLikedIDs() (ids []int) {
	for id := range m.removedliked {
		ids = append(ids, id)
	}
	return
}

// LikedIDs returns the "liked" edge IDs in the mutation.
func (m *UserMutation) LikedIDs() (ids []int) {
	for id := range m.liked {
		ids = append(ids, id)
	}
	return
}

// ResetLiked resets all changes to the "liked" edge.
func (m *UserMutation) ResetLiked() {
	m.liked = nil
	m.clearedliked = false
	m.removedliked = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.created != nil {
		fields = append(fields, user.FieldCreated)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.image_url != nil {
		fields = append(fields, user.FieldImageURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldRole:
		return m.Role()
	case user.FieldCreated:
		return m.Created()
	case user.FieldAge:
		return m.Age()
	case user.FieldImageURL:
		return m.ImageURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldCreated:
		return m.OldCreated(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldImageURL:
		return m.OldImageURL(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldRole:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addrole != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldRole:
		return m.AddedRole()
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldRole:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRole(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAge) {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAge:
		m.ClearAge()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldCreated:
		m.ResetCreated()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldImageURL:
		m.ResetImageURL()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.tweets != nil {
		edges = append(edges, user.EdgeTweets)
	}
	if m.followers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.following != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.liked != nil {
		edges = append(edges, user.EdgeLiked)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.tweets))
		for id := range m.tweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.followers))
		for id := range m.followers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.following))
		for id := range m.following {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLiked:
		ids := make([]ent.Value, 0, len(m.liked))
		for id := range m.liked {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtweets != nil {
		edges = append(edges, user.EdgeTweets)
	}
	if m.removedfollowers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.removedfollowing != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.removedliked != nil {
		edges = append(edges, user.EdgeLiked)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.removedtweets))
		for id := range m.removedtweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.removedfollowers))
		for id := range m.removedfollowers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.removedfollowing))
		for id := range m.removedfollowing {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLiked:
		ids := make([]ent.Value, 0, len(m.removedliked))
		for id := range m.removedliked {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtweets {
		edges = append(edges, user.EdgeTweets)
	}
	if m.clearedfollowers {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.clearedfollowing {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.clearedliked {
		edges = append(edges, user.EdgeLiked)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTweets:
		return m.clearedtweets
	case user.EdgeFollowers:
		return m.clearedfollowers
	case user.EdgeFollowing:
		return m.clearedfollowing
	case user.EdgeLiked:
		return m.clearedliked
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTweets:
		m.ResetTweets()
		return nil
	case user.EdgeFollowers:
		m.ResetFollowers()
		return nil
	case user.EdgeFollowing:
		m.ResetFollowing()
		return nil
	case user.EdgeLiked:
		m.ResetLiked()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
