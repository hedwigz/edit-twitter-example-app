// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/entity"
)

// Entity is the model entity for the Entity schema.
type Entity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// IsFun holds the value of the "isFun" field.
	IsFun bool `json:"isFun,omitempty"`
	// Counter holds the value of the "counter" field.
	Counter int `json:"counter,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Strings holds the value of the "strings" field.
	Strings []string `json:"strings,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entity.FieldStrings:
			values[i] = new([]byte)
		case entity.FieldIsFun:
			values[i] = new(sql.NullBool)
		case entity.FieldID, entity.FieldCounter:
			values[i] = new(sql.NullInt64)
		case entity.FieldData:
			values[i] = new(sql.NullString)
		case entity.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Entity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entity fields.
func (e *Entity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case entity.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				e.Data = value.String
			}
		case entity.FieldIsFun:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isFun", values[i])
			} else if value.Valid {
				e.IsFun = value.Bool
			}
		case entity.FieldCounter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field counter", values[i])
			} else if value.Valid {
				e.Counter = int(value.Int64)
			}
		case entity.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				e.Timestamp = value.Time
			}
		case entity.FieldStrings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field strings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Strings); err != nil {
					return fmt.Errorf("unmarshal field strings: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Entity.
// Note that you need to call Entity.Unwrap() before calling this method if this Entity
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entity) Update() *EntityUpdateOne {
	return (&EntityClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Entity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entity) Unwrap() *Entity {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entity is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entity) String() string {
	var builder strings.Builder
	builder.WriteString("Entity(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", data=")
	builder.WriteString(e.Data)
	builder.WriteString(", isFun=")
	builder.WriteString(fmt.Sprintf("%v", e.IsFun))
	builder.WriteString(", counter=")
	builder.WriteString(fmt.Sprintf("%v", e.Counter))
	builder.WriteString(", timestamp=")
	builder.WriteString(e.Timestamp.Format(time.ANSIC))
	builder.WriteString(", strings=")
	builder.WriteString(fmt.Sprintf("%v", e.Strings))
	builder.WriteByte(')')
	return builder.String()
}

// Entities is a parsable slice of Entity.
type Entities []*Entity

func (e Entities) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
