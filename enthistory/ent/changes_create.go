// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/changes"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/history"
)

// ChangesCreate is the builder for creating a Changes entity.
type ChangesCreate struct {
	config
	mutation *ChangesMutation
	hooks    []Hook
}

// SetColumn sets the "column" field.
func (cc *ChangesCreate) SetColumn(s string) *ChangesCreate {
	cc.mutation.SetColumn(s)
	return cc
}

// SetValue sets the "value" field.
func (cc *ChangesCreate) SetValue(s string) *ChangesCreate {
	cc.mutation.SetValue(s)
	return cc
}

// SetPrevious sets the "previous" field.
func (cc *ChangesCreate) SetPrevious(s string) *ChangesCreate {
	cc.mutation.SetPrevious(s)
	return cc
}

// SetNillablePrevious sets the "previous" field if the given value is not nil.
func (cc *ChangesCreate) SetNillablePrevious(s *string) *ChangesCreate {
	if s != nil {
		cc.SetPrevious(*s)
	}
	return cc
}

// SetOperationID sets the "operation" edge to the History entity by ID.
func (cc *ChangesCreate) SetOperationID(id int) *ChangesCreate {
	cc.mutation.SetOperationID(id)
	return cc
}

// SetNillableOperationID sets the "operation" edge to the History entity by ID if the given value is not nil.
func (cc *ChangesCreate) SetNillableOperationID(id *int) *ChangesCreate {
	if id != nil {
		cc = cc.SetOperationID(*id)
	}
	return cc
}

// SetOperation sets the "operation" edge to the History entity.
func (cc *ChangesCreate) SetOperation(h *History) *ChangesCreate {
	return cc.SetOperationID(h.ID)
}

// Mutation returns the ChangesMutation object of the builder.
func (cc *ChangesCreate) Mutation() *ChangesMutation {
	return cc.mutation
}

// Save creates the Changes in the database.
func (cc *ChangesCreate) Save(ctx context.Context) (*Changes, error) {
	var (
		err  error
		node *Changes
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChangesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChangesCreate) SaveX(ctx context.Context) *Changes {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChangesCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChangesCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChangesCreate) check() error {
	if _, ok := cc.mutation.Column(); !ok {
		return &ValidationError{Name: "column", err: errors.New(`ent: missing required field "Changes.column"`)}
	}
	if _, ok := cc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Changes.value"`)}
	}
	return nil
}

func (cc *ChangesCreate) sqlSave(ctx context.Context) (*Changes, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *ChangesCreate) createSpec() (*Changes, *sqlgraph.CreateSpec) {
	var (
		_node = &Changes{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: changes.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: changes.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Column(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: changes.FieldColumn,
		})
		_node.Column = value
	}
	if value, ok := cc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: changes.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := cc.mutation.Previous(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: changes.FieldPrevious,
		})
		_node.Previous = value
	}
	if nodes := cc.mutation.OperationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changes.OperationTable,
			Columns: []string{changes.OperationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: history.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.history_changes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChangesCreateBulk is the builder for creating many Changes entities in bulk.
type ChangesCreateBulk struct {
	config
	builders []*ChangesCreate
}

// Save creates the Changes entities in the database.
func (ccb *ChangesCreateBulk) Save(ctx context.Context) ([]*Changes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Changes, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChangesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChangesCreateBulk) SaveX(ctx context.Context) []*Changes {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChangesCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChangesCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
