// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/history"
)

// History is the model entity for the History schema.
type History struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EntityName holds the value of the "entity_name" field.
	EntityName string `json:"entity_name,omitempty"`
	// RecordID holds the value of the "record_id" field.
	RecordID int `json:"record_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Action holds the value of the "action" field.
	Action history.Action `json:"action,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HistoryQuery when eager-loading is set.
	Edges HistoryEdges `json:"edges"`
}

// HistoryEdges holds the relations/edges for other nodes in the graph.
type HistoryEdges struct {
	// Changes holds the value of the changes edge.
	Changes []*Changes `json:"changes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChangesOrErr returns the Changes value or an error if the edge
// was not loaded in eager-loading.
func (e HistoryEdges) ChangesOrErr() ([]*Changes, error) {
	if e.loadedTypes[0] {
		return e.Changes, nil
	}
	return nil, &NotLoadedError{edge: "changes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case history.FieldID, history.FieldRecordID:
			values[i] = new(sql.NullInt64)
		case history.FieldEntityName, history.FieldAction:
			values[i] = new(sql.NullString)
		case history.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type History", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History fields.
func (h *History) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case history.FieldEntityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_name", values[i])
			} else if value.Valid {
				h.EntityName = value.String
			}
		case history.FieldRecordID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_id", values[i])
			} else if value.Valid {
				h.RecordID = int(value.Int64)
			}
		case history.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				h.Timestamp = value.Time
			}
		case history.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				h.Action = history.Action(value.String)
			}
		}
	}
	return nil
}

// QueryChanges queries the "changes" edge of the History entity.
func (h *History) QueryChanges() *ChangesQuery {
	return (&HistoryClient{config: h.config}).QueryChanges(h)
}

// Update returns a builder for updating this History.
// Note that you need to call History.Unwrap() before calling this method if this History
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *History) Update() *HistoryUpdateOne {
	return (&HistoryClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the History entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *History) Unwrap() *History {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: History is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *History) String() string {
	var builder strings.Builder
	builder.WriteString("History(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", entity_name=")
	builder.WriteString(h.EntityName)
	builder.WriteString(", record_id=")
	builder.WriteString(fmt.Sprintf("%v", h.RecordID))
	builder.WriteString(", timestamp=")
	builder.WriteString(h.Timestamp.Format(time.ANSIC))
	builder.WriteString(", action=")
	builder.WriteString(fmt.Sprintf("%v", h.Action))
	builder.WriteByte(')')
	return builder.String()
}

// Histories is a parsable slice of History.
type Histories []*History

func (h Histories) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
