// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/ariga/edit-twitter-example-app/enthistory/ent/changes"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/entity"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/history"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChanges = "Changes"
	TypeEntity  = "Entity"
	TypeHistory = "History"
)

// ChangesMutation represents an operation that mutates the Changes nodes in the graph.
type ChangesMutation struct {
	config
	op               Op
	typ              string
	id               *int
	column           *string
	value            *string
	previous         *string
	clearedFields    map[string]struct{}
	operation        *int
	clearedoperation bool
	done             bool
	oldValue         func(context.Context) (*Changes, error)
	predicates       []predicate.Changes
}

var _ ent.Mutation = (*ChangesMutation)(nil)

// changesOption allows management of the mutation configuration using functional options.
type changesOption func(*ChangesMutation)

// newChangesMutation creates new mutation for the Changes entity.
func newChangesMutation(c config, op Op, opts ...changesOption) *ChangesMutation {
	m := &ChangesMutation{
		config:        c,
		op:            op,
		typ:           TypeChanges,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChangesID sets the ID field of the mutation.
func withChangesID(id int) changesOption {
	return func(m *ChangesMutation) {
		var (
			err   error
			once  sync.Once
			value *Changes
		)
		m.oldValue = func(ctx context.Context) (*Changes, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Changes.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChanges sets the old Changes of the mutation.
func withChanges(node *Changes) changesOption {
	return func(m *ChangesMutation) {
		m.oldValue = func(context.Context) (*Changes, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChangesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChangesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChangesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChangesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Changes.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetColumn sets the "column" field.
func (m *ChangesMutation) SetColumn(s string) {
	m.column = &s
}

// Column returns the value of the "column" field in the mutation.
func (m *ChangesMutation) Column() (r string, exists bool) {
	v := m.column
	if v == nil {
		return
	}
	return *v, true
}

// OldColumn returns the old "column" field's value of the Changes entity.
// If the Changes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesMutation) OldColumn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColumn: %w", err)
	}
	return oldValue.Column, nil
}

// ResetColumn resets all changes to the "column" field.
func (m *ChangesMutation) ResetColumn() {
	m.column = nil
}

// SetValue sets the "value" field.
func (m *ChangesMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *ChangesMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Changes entity.
// If the Changes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *ChangesMutation) ResetValue() {
	m.value = nil
}

// SetPrevious sets the "previous" field.
func (m *ChangesMutation) SetPrevious(s string) {
	m.previous = &s
}

// Previous returns the value of the "previous" field in the mutation.
func (m *ChangesMutation) Previous() (r string, exists bool) {
	v := m.previous
	if v == nil {
		return
	}
	return *v, true
}

// OldPrevious returns the old "previous" field's value of the Changes entity.
// If the Changes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesMutation) OldPrevious(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrevious is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrevious requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrevious: %w", err)
	}
	return oldValue.Previous, nil
}

// ClearPrevious clears the value of the "previous" field.
func (m *ChangesMutation) ClearPrevious() {
	m.previous = nil
	m.clearedFields[changes.FieldPrevious] = struct{}{}
}

// PreviousCleared returns if the "previous" field was cleared in this mutation.
func (m *ChangesMutation) PreviousCleared() bool {
	_, ok := m.clearedFields[changes.FieldPrevious]
	return ok
}

// ResetPrevious resets all changes to the "previous" field.
func (m *ChangesMutation) ResetPrevious() {
	m.previous = nil
	delete(m.clearedFields, changes.FieldPrevious)
}

// SetOperationID sets the "operation" edge to the History entity by id.
func (m *ChangesMutation) SetOperationID(id int) {
	m.operation = &id
}

// ClearOperation clears the "operation" edge to the History entity.
func (m *ChangesMutation) ClearOperation() {
	m.clearedoperation = true
}

// OperationCleared reports if the "operation" edge to the History entity was cleared.
func (m *ChangesMutation) OperationCleared() bool {
	return m.clearedoperation
}

// OperationID returns the "operation" edge ID in the mutation.
func (m *ChangesMutation) OperationID() (id int, exists bool) {
	if m.operation != nil {
		return *m.operation, true
	}
	return
}

// OperationIDs returns the "operation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OperationID instead. It exists only for internal usage by the builders.
func (m *ChangesMutation) OperationIDs() (ids []int) {
	if id := m.operation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperation resets all changes to the "operation" edge.
func (m *ChangesMutation) ResetOperation() {
	m.operation = nil
	m.clearedoperation = false
}

// Where appends a list predicates to the ChangesMutation builder.
func (m *ChangesMutation) Where(ps ...predicate.Changes) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChangesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Changes).
func (m *ChangesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChangesMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.column != nil {
		fields = append(fields, changes.FieldColumn)
	}
	if m.value != nil {
		fields = append(fields, changes.FieldValue)
	}
	if m.previous != nil {
		fields = append(fields, changes.FieldPrevious)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChangesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case changes.FieldColumn:
		return m.Column()
	case changes.FieldValue:
		return m.Value()
	case changes.FieldPrevious:
		return m.Previous()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChangesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case changes.FieldColumn:
		return m.OldColumn(ctx)
	case changes.FieldValue:
		return m.OldValue(ctx)
	case changes.FieldPrevious:
		return m.OldPrevious(ctx)
	}
	return nil, fmt.Errorf("unknown Changes field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChangesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case changes.FieldColumn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColumn(v)
		return nil
	case changes.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case changes.FieldPrevious:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrevious(v)
		return nil
	}
	return fmt.Errorf("unknown Changes field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChangesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChangesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChangesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Changes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChangesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(changes.FieldPrevious) {
		fields = append(fields, changes.FieldPrevious)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChangesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChangesMutation) ClearField(name string) error {
	switch name {
	case changes.FieldPrevious:
		m.ClearPrevious()
		return nil
	}
	return fmt.Errorf("unknown Changes nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChangesMutation) ResetField(name string) error {
	switch name {
	case changes.FieldColumn:
		m.ResetColumn()
		return nil
	case changes.FieldValue:
		m.ResetValue()
		return nil
	case changes.FieldPrevious:
		m.ResetPrevious()
		return nil
	}
	return fmt.Errorf("unknown Changes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChangesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.operation != nil {
		edges = append(edges, changes.EdgeOperation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChangesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case changes.EdgeOperation:
		if id := m.operation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChangesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChangesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChangesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedoperation {
		edges = append(edges, changes.EdgeOperation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChangesMutation) EdgeCleared(name string) bool {
	switch name {
	case changes.EdgeOperation:
		return m.clearedoperation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChangesMutation) ClearEdge(name string) error {
	switch name {
	case changes.EdgeOperation:
		m.ClearOperation()
		return nil
	}
	return fmt.Errorf("unknown Changes unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChangesMutation) ResetEdge(name string) error {
	switch name {
	case changes.EdgeOperation:
		m.ResetOperation()
		return nil
	}
	return fmt.Errorf("unknown Changes edge %s", name)
}

// EntityMutation represents an operation that mutates the Entity nodes in the graph.
type EntityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	data          *string
	isFun         *bool
	counter       *int
	addcounter    *int
	timestamp     *time.Time
	strings       *[]string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Entity, error)
	predicates    []predicate.Entity
}

var _ ent.Mutation = (*EntityMutation)(nil)

// entityOption allows management of the mutation configuration using functional options.
type entityOption func(*EntityMutation)

// newEntityMutation creates new mutation for the Entity entity.
func newEntityMutation(c config, op Op, opts ...entityOption) *EntityMutation {
	m := &EntityMutation{
		config:        c,
		op:            op,
		typ:           TypeEntity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntityID sets the ID field of the mutation.
func withEntityID(id int) entityOption {
	return func(m *EntityMutation) {
		var (
			err   error
			once  sync.Once
			value *Entity
		)
		m.oldValue = func(ctx context.Context) (*Entity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Entity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntity sets the old Entity of the mutation.
func withEntity(node *Entity) entityOption {
	return func(m *EntityMutation) {
		m.oldValue = func(context.Context) (*Entity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Entity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetData sets the "data" field.
func (m *EntityMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *EntityMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Entity entity.
// If the Entity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *EntityMutation) ResetData() {
	m.data = nil
}

// SetIsFun sets the "isFun" field.
func (m *EntityMutation) SetIsFun(b bool) {
	m.isFun = &b
}

// IsFun returns the value of the "isFun" field in the mutation.
func (m *EntityMutation) IsFun() (r bool, exists bool) {
	v := m.isFun
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFun returns the old "isFun" field's value of the Entity entity.
// If the Entity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityMutation) OldIsFun(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFun is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFun requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFun: %w", err)
	}
	return oldValue.IsFun, nil
}

// ClearIsFun clears the value of the "isFun" field.
func (m *EntityMutation) ClearIsFun() {
	m.isFun = nil
	m.clearedFields[entity.FieldIsFun] = struct{}{}
}

// IsFunCleared returns if the "isFun" field was cleared in this mutation.
func (m *EntityMutation) IsFunCleared() bool {
	_, ok := m.clearedFields[entity.FieldIsFun]
	return ok
}

// ResetIsFun resets all changes to the "isFun" field.
func (m *EntityMutation) ResetIsFun() {
	m.isFun = nil
	delete(m.clearedFields, entity.FieldIsFun)
}

// SetCounter sets the "counter" field.
func (m *EntityMutation) SetCounter(i int) {
	m.counter = &i
	m.addcounter = nil
}

// Counter returns the value of the "counter" field in the mutation.
func (m *EntityMutation) Counter() (r int, exists bool) {
	v := m.counter
	if v == nil {
		return
	}
	return *v, true
}

// OldCounter returns the old "counter" field's value of the Entity entity.
// If the Entity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityMutation) OldCounter(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounter: %w", err)
	}
	return oldValue.Counter, nil
}

// AddCounter adds i to the "counter" field.
func (m *EntityMutation) AddCounter(i int) {
	if m.addcounter != nil {
		*m.addcounter += i
	} else {
		m.addcounter = &i
	}
}

// AddedCounter returns the value that was added to the "counter" field in this mutation.
func (m *EntityMutation) AddedCounter() (r int, exists bool) {
	v := m.addcounter
	if v == nil {
		return
	}
	return *v, true
}

// ClearCounter clears the value of the "counter" field.
func (m *EntityMutation) ClearCounter() {
	m.counter = nil
	m.addcounter = nil
	m.clearedFields[entity.FieldCounter] = struct{}{}
}

// CounterCleared returns if the "counter" field was cleared in this mutation.
func (m *EntityMutation) CounterCleared() bool {
	_, ok := m.clearedFields[entity.FieldCounter]
	return ok
}

// ResetCounter resets all changes to the "counter" field.
func (m *EntityMutation) ResetCounter() {
	m.counter = nil
	m.addcounter = nil
	delete(m.clearedFields, entity.FieldCounter)
}

// SetTimestamp sets the "timestamp" field.
func (m *EntityMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *EntityMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Entity entity.
// If the Entity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ClearTimestamp clears the value of the "timestamp" field.
func (m *EntityMutation) ClearTimestamp() {
	m.timestamp = nil
	m.clearedFields[entity.FieldTimestamp] = struct{}{}
}

// TimestampCleared returns if the "timestamp" field was cleared in this mutation.
func (m *EntityMutation) TimestampCleared() bool {
	_, ok := m.clearedFields[entity.FieldTimestamp]
	return ok
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *EntityMutation) ResetTimestamp() {
	m.timestamp = nil
	delete(m.clearedFields, entity.FieldTimestamp)
}

// SetStrings sets the "strings" field.
func (m *EntityMutation) SetStrings(s []string) {
	m.strings = &s
}

// Strings returns the value of the "strings" field in the mutation.
func (m *EntityMutation) Strings() (r []string, exists bool) {
	v := m.strings
	if v == nil {
		return
	}
	return *v, true
}

// OldStrings returns the old "strings" field's value of the Entity entity.
// If the Entity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntityMutation) OldStrings(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrings: %w", err)
	}
	return oldValue.Strings, nil
}

// ClearStrings clears the value of the "strings" field.
func (m *EntityMutation) ClearStrings() {
	m.strings = nil
	m.clearedFields[entity.FieldStrings] = struct{}{}
}

// StringsCleared returns if the "strings" field was cleared in this mutation.
func (m *EntityMutation) StringsCleared() bool {
	_, ok := m.clearedFields[entity.FieldStrings]
	return ok
}

// ResetStrings resets all changes to the "strings" field.
func (m *EntityMutation) ResetStrings() {
	m.strings = nil
	delete(m.clearedFields, entity.FieldStrings)
}

// Where appends a list predicates to the EntityMutation builder.
func (m *EntityMutation) Where(ps ...predicate.Entity) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EntityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Entity).
func (m *EntityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntityMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.data != nil {
		fields = append(fields, entity.FieldData)
	}
	if m.isFun != nil {
		fields = append(fields, entity.FieldIsFun)
	}
	if m.counter != nil {
		fields = append(fields, entity.FieldCounter)
	}
	if m.timestamp != nil {
		fields = append(fields, entity.FieldTimestamp)
	}
	if m.strings != nil {
		fields = append(fields, entity.FieldStrings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entity.FieldData:
		return m.Data()
	case entity.FieldIsFun:
		return m.IsFun()
	case entity.FieldCounter:
		return m.Counter()
	case entity.FieldTimestamp:
		return m.Timestamp()
	case entity.FieldStrings:
		return m.Strings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entity.FieldData:
		return m.OldData(ctx)
	case entity.FieldIsFun:
		return m.OldIsFun(ctx)
	case entity.FieldCounter:
		return m.OldCounter(ctx)
	case entity.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case entity.FieldStrings:
		return m.OldStrings(ctx)
	}
	return nil, fmt.Errorf("unknown Entity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entity.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case entity.FieldIsFun:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFun(v)
		return nil
	case entity.FieldCounter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounter(v)
		return nil
	case entity.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case entity.FieldStrings:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrings(v)
		return nil
	}
	return fmt.Errorf("unknown Entity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntityMutation) AddedFields() []string {
	var fields []string
	if m.addcounter != nil {
		fields = append(fields, entity.FieldCounter)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entity.FieldCounter:
		return m.AddedCounter()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entity.FieldCounter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounter(v)
		return nil
	}
	return fmt.Errorf("unknown Entity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entity.FieldIsFun) {
		fields = append(fields, entity.FieldIsFun)
	}
	if m.FieldCleared(entity.FieldCounter) {
		fields = append(fields, entity.FieldCounter)
	}
	if m.FieldCleared(entity.FieldTimestamp) {
		fields = append(fields, entity.FieldTimestamp)
	}
	if m.FieldCleared(entity.FieldStrings) {
		fields = append(fields, entity.FieldStrings)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntityMutation) ClearField(name string) error {
	switch name {
	case entity.FieldIsFun:
		m.ClearIsFun()
		return nil
	case entity.FieldCounter:
		m.ClearCounter()
		return nil
	case entity.FieldTimestamp:
		m.ClearTimestamp()
		return nil
	case entity.FieldStrings:
		m.ClearStrings()
		return nil
	}
	return fmt.Errorf("unknown Entity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntityMutation) ResetField(name string) error {
	switch name {
	case entity.FieldData:
		m.ResetData()
		return nil
	case entity.FieldIsFun:
		m.ResetIsFun()
		return nil
	case entity.FieldCounter:
		m.ResetCounter()
		return nil
	case entity.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case entity.FieldStrings:
		m.ResetStrings()
		return nil
	}
	return fmt.Errorf("unknown Entity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Entity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Entity edge %s", name)
}

// HistoryMutation represents an operation that mutates the History nodes in the graph.
type HistoryMutation struct {
	config
	op             Op
	typ            string
	id             *int
	entity_name    *string
	record_id      *int
	addrecord_id   *int
	timestamp      *time.Time
	action         *history.Action
	clearedFields  map[string]struct{}
	changes        map[int]struct{}
	removedchanges map[int]struct{}
	clearedchanges bool
	done           bool
	oldValue       func(context.Context) (*History, error)
	predicates     []predicate.History
}

var _ ent.Mutation = (*HistoryMutation)(nil)

// historyOption allows management of the mutation configuration using functional options.
type historyOption func(*HistoryMutation)

// newHistoryMutation creates new mutation for the History entity.
func newHistoryMutation(c config, op Op, opts ...historyOption) *HistoryMutation {
	m := &HistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistoryID sets the ID field of the mutation.
func withHistoryID(id int) historyOption {
	return func(m *HistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *History
		)
		m.oldValue = func(ctx context.Context) (*History, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().History.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistory sets the old History of the mutation.
func withHistory(node *History) historyOption {
	return func(m *HistoryMutation) {
		m.oldValue = func(context.Context) (*History, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().History.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEntityName sets the "entity_name" field.
func (m *HistoryMutation) SetEntityName(s string) {
	m.entity_name = &s
}

// EntityName returns the value of the "entity_name" field in the mutation.
func (m *HistoryMutation) EntityName() (r string, exists bool) {
	v := m.entity_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityName returns the old "entity_name" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldEntityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityName: %w", err)
	}
	return oldValue.EntityName, nil
}

// ResetEntityName resets all changes to the "entity_name" field.
func (m *HistoryMutation) ResetEntityName() {
	m.entity_name = nil
}

// SetRecordID sets the "record_id" field.
func (m *HistoryMutation) SetRecordID(i int) {
	m.record_id = &i
	m.addrecord_id = nil
}

// RecordID returns the value of the "record_id" field in the mutation.
func (m *HistoryMutation) RecordID() (r int, exists bool) {
	v := m.record_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordID returns the old "record_id" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldRecordID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecordID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecordID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordID: %w", err)
	}
	return oldValue.RecordID, nil
}

// AddRecordID adds i to the "record_id" field.
func (m *HistoryMutation) AddRecordID(i int) {
	if m.addrecord_id != nil {
		*m.addrecord_id += i
	} else {
		m.addrecord_id = &i
	}
}

// AddedRecordID returns the value that was added to the "record_id" field in this mutation.
func (m *HistoryMutation) AddedRecordID() (r int, exists bool) {
	v := m.addrecord_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecordID resets all changes to the "record_id" field.
func (m *HistoryMutation) ResetRecordID() {
	m.record_id = nil
	m.addrecord_id = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *HistoryMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *HistoryMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *HistoryMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetAction sets the "action" field.
func (m *HistoryMutation) SetAction(h history.Action) {
	m.action = &h
}

// Action returns the value of the "action" field in the mutation.
func (m *HistoryMutation) Action() (r history.Action, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the History entity.
// If the History object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoryMutation) OldAction(ctx context.Context) (v history.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *HistoryMutation) ResetAction() {
	m.action = nil
}

// AddChangeIDs adds the "changes" edge to the Changes entity by ids.
func (m *HistoryMutation) AddChangeIDs(ids ...int) {
	if m.changes == nil {
		m.changes = make(map[int]struct{})
	}
	for i := range ids {
		m.changes[ids[i]] = struct{}{}
	}
}

// ClearChanges clears the "changes" edge to the Changes entity.
func (m *HistoryMutation) ClearChanges() {
	m.clearedchanges = true
}

// ChangesCleared reports if the "changes" edge to the Changes entity was cleared.
func (m *HistoryMutation) ChangesCleared() bool {
	return m.clearedchanges
}

// RemoveChangeIDs removes the "changes" edge to the Changes entity by IDs.
func (m *HistoryMutation) RemoveChangeIDs(ids ...int) {
	if m.removedchanges == nil {
		m.removedchanges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.changes, ids[i])
		m.removedchanges[ids[i]] = struct{}{}
	}
}

// RemovedChanges returns the removed IDs of the "changes" edge to the Changes entity.
func (m *HistoryMutation) RemovedChangesIDs() (ids []int) {
	for id := range m.removedchanges {
		ids = append(ids, id)
	}
	return
}

// ChangesIDs returns the "changes" edge IDs in the mutation.
func (m *HistoryMutation) ChangesIDs() (ids []int) {
	for id := range m.changes {
		ids = append(ids, id)
	}
	return
}

// ResetChanges resets all changes to the "changes" edge.
func (m *HistoryMutation) ResetChanges() {
	m.changes = nil
	m.clearedchanges = false
	m.removedchanges = nil
}

// Where appends a list predicates to the HistoryMutation builder.
func (m *HistoryMutation) Where(ps ...predicate.History) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HistoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (History).
func (m *HistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistoryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.entity_name != nil {
		fields = append(fields, history.FieldEntityName)
	}
	if m.record_id != nil {
		fields = append(fields, history.FieldRecordID)
	}
	if m.timestamp != nil {
		fields = append(fields, history.FieldTimestamp)
	}
	if m.action != nil {
		fields = append(fields, history.FieldAction)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case history.FieldEntityName:
		return m.EntityName()
	case history.FieldRecordID:
		return m.RecordID()
	case history.FieldTimestamp:
		return m.Timestamp()
	case history.FieldAction:
		return m.Action()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case history.FieldEntityName:
		return m.OldEntityName(ctx)
	case history.FieldRecordID:
		return m.OldRecordID(ctx)
	case history.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case history.FieldAction:
		return m.OldAction(ctx)
	}
	return nil, fmt.Errorf("unknown History field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case history.FieldEntityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityName(v)
		return nil
	case history.FieldRecordID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordID(v)
		return nil
	case history.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case history.FieldAction:
		v, ok := value.(history.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistoryMutation) AddedFields() []string {
	var fields []string
	if m.addrecord_id != nil {
		fields = append(fields, history.FieldRecordID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case history.FieldRecordID:
		return m.AddedRecordID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case history.FieldRecordID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecordID(v)
		return nil
	}
	return fmt.Errorf("unknown History numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown History nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistoryMutation) ResetField(name string) error {
	switch name {
	case history.FieldEntityName:
		m.ResetEntityName()
		return nil
	case history.FieldRecordID:
		m.ResetRecordID()
		return nil
	case history.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case history.FieldAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown History field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.changes != nil {
		edges = append(edges, history.EdgeChanges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case history.EdgeChanges:
		ids := make([]ent.Value, 0, len(m.changes))
		for id := range m.changes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedchanges != nil {
		edges = append(edges, history.EdgeChanges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case history.EdgeChanges:
		ids := make([]ent.Value, 0, len(m.removedchanges))
		for id := range m.removedchanges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchanges {
		edges = append(edges, history.EdgeChanges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case history.EdgeChanges:
		return m.clearedchanges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown History unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistoryMutation) ResetEdge(name string) error {
	switch name {
	case history.EdgeChanges:
		m.ResetChanges()
		return nil
	}
	return fmt.Errorf("unknown History edge %s", name)
}
