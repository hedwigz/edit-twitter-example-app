// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/changes"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/history"
)

// Changes is the model entity for the Changes schema.
type Changes struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Column holds the value of the "column" field.
	Column string `json:"column,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Previous holds the value of the "previous" field.
	Previous string `json:"previous,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChangesQuery when eager-loading is set.
	Edges           ChangesEdges `json:"edges"`
	history_changes *int
}

// ChangesEdges holds the relations/edges for other nodes in the graph.
type ChangesEdges struct {
	// Operation holds the value of the operation edge.
	Operation *History `json:"operation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OperationOrErr returns the Operation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChangesEdges) OperationOrErr() (*History, error) {
	if e.loadedTypes[0] {
		if e.Operation == nil {
			// The edge operation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: history.Label}
		}
		return e.Operation, nil
	}
	return nil, &NotLoadedError{edge: "operation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Changes) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case changes.FieldID:
			values[i] = new(sql.NullInt64)
		case changes.FieldColumn, changes.FieldValue, changes.FieldPrevious:
			values[i] = new(sql.NullString)
		case changes.ForeignKeys[0]: // history_changes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Changes", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Changes fields.
func (c *Changes) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case changes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case changes.FieldColumn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field column", values[i])
			} else if value.Valid {
				c.Column = value.String
			}
		case changes.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				c.Value = value.String
			}
		case changes.FieldPrevious:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field previous", values[i])
			} else if value.Valid {
				c.Previous = value.String
			}
		case changes.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field history_changes", value)
			} else if value.Valid {
				c.history_changes = new(int)
				*c.history_changes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOperation queries the "operation" edge of the Changes entity.
func (c *Changes) QueryOperation() *HistoryQuery {
	return (&ChangesClient{config: c.config}).QueryOperation(c)
}

// Update returns a builder for updating this Changes.
// Note that you need to call Changes.Unwrap() before calling this method if this Changes
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Changes) Update() *ChangesUpdateOne {
	return (&ChangesClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Changes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Changes) Unwrap() *Changes {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Changes is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Changes) String() string {
	var builder strings.Builder
	builder.WriteString("Changes(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", column=")
	builder.WriteString(c.Column)
	builder.WriteString(", value=")
	builder.WriteString(c.Value)
	builder.WriteString(", previous=")
	builder.WriteString(c.Previous)
	builder.WriteByte(')')
	return builder.String()
}

// ChangesSlice is a parsable slice of Changes.
type ChangesSlice []*Changes

func (c ChangesSlice) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
