// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/entity"
)

// EntityCreate is the builder for creating a Entity entity.
type EntityCreate struct {
	config
	mutation *EntityMutation
	hooks    []Hook
}

// SetData sets the "data" field.
func (ec *EntityCreate) SetData(s string) *EntityCreate {
	ec.mutation.SetData(s)
	return ec
}

// SetIsFun sets the "isFun" field.
func (ec *EntityCreate) SetIsFun(b bool) *EntityCreate {
	ec.mutation.SetIsFun(b)
	return ec
}

// SetNillableIsFun sets the "isFun" field if the given value is not nil.
func (ec *EntityCreate) SetNillableIsFun(b *bool) *EntityCreate {
	if b != nil {
		ec.SetIsFun(*b)
	}
	return ec
}

// SetCounter sets the "counter" field.
func (ec *EntityCreate) SetCounter(i int) *EntityCreate {
	ec.mutation.SetCounter(i)
	return ec
}

// SetNillableCounter sets the "counter" field if the given value is not nil.
func (ec *EntityCreate) SetNillableCounter(i *int) *EntityCreate {
	if i != nil {
		ec.SetCounter(*i)
	}
	return ec
}

// SetTimestamp sets the "timestamp" field.
func (ec *EntityCreate) SetTimestamp(t time.Time) *EntityCreate {
	ec.mutation.SetTimestamp(t)
	return ec
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ec *EntityCreate) SetNillableTimestamp(t *time.Time) *EntityCreate {
	if t != nil {
		ec.SetTimestamp(*t)
	}
	return ec
}

// SetStrings sets the "strings" field.
func (ec *EntityCreate) SetStrings(s []string) *EntityCreate {
	ec.mutation.SetStrings(s)
	return ec
}

// Mutation returns the EntityMutation object of the builder.
func (ec *EntityCreate) Mutation() *EntityMutation {
	return ec.mutation
}

// Save creates the Entity in the database.
func (ec *EntityCreate) Save(ctx context.Context) (*Entity, error) {
	var (
		err  error
		node *Entity
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntityCreate) SaveX(ctx context.Context) *Entity {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntityCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntityCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntityCreate) check() error {
	if _, ok := ec.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "Entity.data"`)}
	}
	return nil
}

func (ec *EntityCreate) sqlSave(ctx context.Context) (*Entity, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EntityCreate) createSpec() (*Entity, *sqlgraph.CreateSpec) {
	var (
		_node = &Entity{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entity.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entity.FieldData,
		})
		_node.Data = value
	}
	if value, ok := ec.mutation.IsFun(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: entity.FieldIsFun,
		})
		_node.IsFun = value
	}
	if value, ok := ec.mutation.Counter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: entity.FieldCounter,
		})
		_node.Counter = value
	}
	if value, ok := ec.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	if value, ok := ec.mutation.Strings(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: entity.FieldStrings,
		})
		_node.Strings = value
	}
	return _node, _spec
}

// EntityCreateBulk is the builder for creating many Entity entities in bulk.
type EntityCreateBulk struct {
	config
	builders []*EntityCreate
}

// Save creates the Entity entities in the database.
func (ecb *EntityCreateBulk) Save(ctx context.Context) ([]*Entity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entity, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntityCreateBulk) SaveX(ctx context.Context) []*Entity {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntityCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntityCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
