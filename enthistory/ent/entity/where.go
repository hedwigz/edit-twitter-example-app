// Code generated by entc, DO NOT EDIT.

package entity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ariga/edit-twitter-example-app/enthistory/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// IsFun applies equality check predicate on the "isFun" field. It's identical to IsFunEQ.
func IsFun(v bool) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFun), v))
	})
}

// Counter applies equality check predicate on the "counter" field. It's identical to CounterEQ.
func Counter(v int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounter), v))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldData), v))
	})
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldData), v))
	})
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldData), v))
	})
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldData), v))
	})
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldData), v))
	})
}

// IsFunEQ applies the EQ predicate on the "isFun" field.
func IsFunEQ(v bool) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFun), v))
	})
}

// IsFunNEQ applies the NEQ predicate on the "isFun" field.
func IsFunNEQ(v bool) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFun), v))
	})
}

// IsFunIsNil applies the IsNil predicate on the "isFun" field.
func IsFunIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsFun)))
	})
}

// IsFunNotNil applies the NotNil predicate on the "isFun" field.
func IsFunNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsFun)))
	})
}

// CounterEQ applies the EQ predicate on the "counter" field.
func CounterEQ(v int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounter), v))
	})
}

// CounterNEQ applies the NEQ predicate on the "counter" field.
func CounterNEQ(v int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCounter), v))
	})
}

// CounterIn applies the In predicate on the "counter" field.
func CounterIn(vs ...int) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCounter), v...))
	})
}

// CounterNotIn applies the NotIn predicate on the "counter" field.
func CounterNotIn(vs ...int) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCounter), v...))
	})
}

// CounterGT applies the GT predicate on the "counter" field.
func CounterGT(v int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCounter), v))
	})
}

// CounterGTE applies the GTE predicate on the "counter" field.
func CounterGTE(v int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCounter), v))
	})
}

// CounterLT applies the LT predicate on the "counter" field.
func CounterLT(v int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCounter), v))
	})
}

// CounterLTE applies the LTE predicate on the "counter" field.
func CounterLTE(v int) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCounter), v))
	})
}

// CounterIsNil applies the IsNil predicate on the "counter" field.
func CounterIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCounter)))
	})
}

// CounterNotNil applies the NotNil predicate on the "counter" field.
func CounterNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCounter)))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// TimestampIsNil applies the IsNil predicate on the "timestamp" field.
func TimestampIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimestamp)))
	})
}

// TimestampNotNil applies the NotNil predicate on the "timestamp" field.
func TimestampNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimestamp)))
	})
}

// StringsIsNil applies the IsNil predicate on the "strings" field.
func StringsIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStrings)))
	})
}

// StringsNotNil applies the NotNil predicate on the "strings" field.
func StringsNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStrings)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		p(s.Not())
	})
}
