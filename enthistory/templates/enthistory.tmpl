{{/* Tell Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "enthistory" }}

{{/* Add the base header for the generated file */}}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
	"strconv"

	"entgo.io/ent"
  {{ range $n := $.Nodes }}
    "{{ $n.Config.Package }}/{{ $n.Package }}"
  {{- end }}
)

// Enrich allow modifying how an History node is created
type Enrich func(context.Context, *HistoryCreate) *HistoryCreate

type historyMutator struct {
	mutationEnrich Enrich
}

func NewHistoryMutator(mutationEnrich Enrich) historyMutator {
	return historyMutator{mutationEnrich}
}

{{ $hn := filterHistoryNodes $.Nodes }}
{{ range $n := $hn }}
	{{ $client := print $n.Name "Client" }}
	{{ $receiver := $n.Receiver }}
	{{ $rec := $n.Receiver }}{{ if eq $rec "c" }}{{ $rec = printf "%.2s" $n.Name | lower }}{{ end }}

	{{ $arg := $rec }}{{ if eq $arg "id" }}{{ $arg = "node" }}{{ end }}
	// QueryHistory queries the history of {{ $n.Name }}.
	func (c *{{ $client }}) QueryHistory({{ $arg }} *{{ $n.Name }}) *HistoryQuery {
		query := &HistoryQuery{config: c.config}
		query.path = func(ctx context.Context) (fromV {{ $.Storage.Builder }}, _ error) {
			{{- /* see entc/gen/template/client.tmpl:241 */ -}}
			id := {{ $receiver }}.ID
			step := sqlgraph.NewStep(
				sqlgraph.From({{ $n.Package }}.Table, {{ $n.Package }}.{{ $n.ID.Constant }}, id),
				sqlgraph.To(history.Table, history.FieldRecordID),
				sqlgraph.Edge(sqlgraph.O2M, false, history.Table, history.FieldRecordID),
			)
			fromV = sqlgraph.Neighbors({{ $receiver }}.driver.Dialect(), step)
			return fromV, nil
		}
		return query
	}

	{{ $mutation := $n.MutationName }}
	func (hm historyMutator) {{ $n.Name }}HistoryMutateHook(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func (ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if !m.Op().Is(ent.OpCreate|ent.OpUpdateOne) {
				return next.Mutate(ctx,m)
			}
			tm := m.(*{{ $mutation }})
			{{- /* Read previous value before mutation is applied. */}}
			prevs := make(map[string]string)
			{{- range $f := $n.Fields }}
				{{- if isHistoryField $f }}
					if prev, err := tm.Old{{ $f.MutationGet }}(ctx); err == nil {
						{{- fieldMarshal $f "prev" "pv" }}
						prevs["{{ $f.Name }}"] = pv
					}
				{{- end }}
			{{- end }}
			tx, err := tm.Tx()
			if err != nil {
				return nil, err
			}
			v, err := next.Mutate(ctx, m)
			if err != nil {
				return v, err
			}
			t := v.(*{{ $n.Name }})
			var bulk []*ChangesCreate
			{{- range $f := $n.Fields }}
				{{- if isHistoryField $f }}
				if c, ok := tm.{{ $f.MutationGet }}(); ok {
					{{- fieldMarshal $f "c" "fv" }}
					change := tx.Changes.Create().
						SetColumn("{{ $f.Name }}").
						SetValue(fv)
					if prev, ok := prevs["{{ $f.Name }}"]; ok {
						change.SetPrevious(prev)
					}
					bulk = append(bulk, change)
				}
				{{- end }}
			{{- end }}
			if len(bulk) == 0 {
				return v, nil
			}
			changes, err := tx.Changes.CreateBulk(bulk...).Save(ctx)
			if err != nil {
				return nil, err
			}

			action := history.ActionCreate
			if m.Op().Is(ent.OpUpdate | ent.OpUpdateOne) {
				action = history.ActionUpdate
			}

			hc := tx.History.Create().
				AddChanges(changes...).
				SetRecordID(t.ID).
				SetTimestamp(time.Now()).
				SetEntityName("{{$n.Name}}").
				SetAction(action)

			if hm.mutationEnrich != nil {
				hc = hm.mutationEnrich(ctx, hc)
			}

			return v, hc.Exec(ctx)
		})
	}
{{ end }}
	// HookHistory Hooks the ent.Client with all of history mutators.
	func HookHistory(client *Client, enrich Enrich) {
		hm := NewHistoryMutator(enrich)
	{{- range $n := $hn }}
		client.{{$n.Name}}.Use(hm.{{ $n.Name }}HistoryMutateHook)
	{{- end }}
	}
{{ end }}